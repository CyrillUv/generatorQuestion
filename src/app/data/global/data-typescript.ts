import { IDataQuestion } from '../question/type';

export const dataTS: IDataQuestion = {
  name: 'TypeScript',
  questions: [
    {
      question: 'Что такое TypeScript',
      response:
        'TypeScript - это язык программирования, со строгой типизацией, расширяет возможности JS,\n' +
        '  // обратно совместимый с JS, и компилируется в JS, явная Типизация, поддержка использования ' +
        'классов, возможность подключать модули\n',
      active: false,
    },
    {
      question: 'Типизация в typescript',
      response:
        '2.let, const - переменные, функции принимают значение с типизацией и возвращают типизированное значение\n' +
        '         Типы данных -\n' +
        '        boolean,\n' +
        '        number,\n' +
        '        string,\n' +
        '        Array,\n' +
        '        unknown,\n' +
        '        any,\n' +
        '        symbol,\n' +
        '        null,\n' +
        '        undefined,\n' +
        '        never,\n' +
        '        кортеж\n' +
        '        Совместимость типов\n' +
        '        Сравнение двух типов  - если сравнить два интерфейса у одного два поля у другого 3 таких же и еще 1 то при\n' +
        '        сравнении меньшего с большим true, иначе false, также при сравнении функций и их ожидаемое значение\n' +
        'Typescript — это надстройка над JavaScript, которая добавляет статическую типизацию. Это означает, что вы можете явно указывать' +
        ' типы данных, что позволяет улучшить качество кода и выявить ошибки на этапе компиляции, вместо того чтобы находить их во время ' +
        'выполнения. Вот подробности о типизации в TypeScript:\n' +
        '\n' +
        '1. Основные типы данных\n' +
        '\n' +
        'TypeScript поддерживает несколько основных типов, которые можно использовать при объявлении переменных:\n' +
        '\n' +
        '- number: для чисел (например, 1, 2.5).\n' +
        '- string: для строк (например, "Hello", "TypeScript").\n' +
        '- boolean: для логических значений (true/false).\n' +
        '- array: массивы могут быть объявлены с использованием синтаксиса массивов (например, number[] для массива чисел) или' +
        ' с использованием обобщений (например, Array <`number`>).\n' +
        '- tuple: кортежи позволяют создавать массивы с фиксированной длиной и фиксированными типами (например, [string, number] для массива,' +
        ' содержащего строку и число).\n' +
        '- enum: позволяет создавать набор именованных констант (например, enum Color { Red, Green, Blue }).\n' +
        '- any: тип, который позволяет присваивать значения любого типа. Используется, когда вам не нужно жесткое соблюдение типов,' +
        ' но стоит использовать его с осторожностью.\n' +
        '- void: используется для обозначения функций, которые ничего не возвращают.\n' +
        '- null и undefined: представляют собой отсутствие значения или неопределенное значение.\n' +
        '\n' +
        '### 2. Явная и неявная типизация\n' +
        '\n' +
        '- Явная типизация: Вы можете явно указывать тип переменной при ее объявлении.' +
        '- Неявная типизация: TypeScript может автоматически выводить тип переменной на основании присвоенного значения.' +
        '3.Функции и типы' +
        '4.Интерфейсы и типы объектов' +
        '5. Объединения и пересечения типов\n' +
        '\n' +
        '- Объединение типов (Union Types) позволяет переменной принимать значения нескольких типов' +
        '- Пересечения типов (Intersection Types) позволяют комбинировать несколько типов возможных свойств' +
        '6. Типизация в классах\n' +
        '7. Дженерики\n' +
        'Дженерики позволяют писать обобщенные функции и классы, которые работают с разными типами данных' +
        '8. Типы без значения (Type Aliases)\n' +
        '\n' +
        'Вы можете создавать алиасы для типов с помощью оператора type' +
        'Типизация в TypeScript помогает создавать более безопасный и сопровождённый код. Определение типов предварительно позволяет' +
        ' избежать многих распространённых ошибок, улучшить читаемость кода и упростить его сопровождение.' +
        ' Использование TypeScript является особенно полезным в крупных и сложных приложениях, где упростить работу с типами становится критически важным.',
      active: false,
    },
    {
      question: 'Наследование в TypeScript',
      response:
        'механизм, который позволяет создавать новые классы на основе уже существующих. Это позволяет переиспользовать ' +
        'код и организовывать его более структурированно. TypeScript поддерживает как однонаследование (один класс может наследоваться от одного родительского),' +
        ' так и интерфейсы, которые могут использоваться для создания множественных наследований.\n' +
        '\n' +
        ' Основные аспекты наследования в TypeScript:\n' +
        '\n' +
        ' 1. Классы и наследование\n' +
        '\n' +
        'В TypeScript вы можете создавать классы и наследовать их, используя ключевое слово extends. Когда класс наследует другой класс, он получает доступ ко' +
        ' всем его свойствам и методам.' +
        '2. Конструктор в наследуемом классе\n' +
        '\n' +
        'Если у родительского класса есть конструктор, вы должны вызывать его из дочернего класса с помощью super()' +
        '3. Свойства и методы\n' +
        '\n' +
        'Дочерний класс может использовать как свойства и методы родительского класса, так и определять свои собственные.' +
        '4. Модификаторы доступа\n' +
        '\n' +
        'TypeScript поддерживает три модификатора доступа: public, protected и private.\n' +
        '\n' +
        '- Public: Свойства и методы доступны из любого места.\n' +
        '- Protected: Свойства и методы доступны только внутри класса и его подклассов.\n' +
        '- Private: Свойства и методы доступны только внутри класса' +
        '5. Интерфейсы и множественное наследование\n' +
        '\n' +
        'TypeScript поддерживает интерфейсы и может реализовывать множественное наследование через их реализацию.' +
        'Наследование в TypeScript предоставляет мощный способ организации кода, увеличивая его повторное использование' +
        ' и облегчая поддержание. Использование модификаторов доступа, конструкторов и переопределений методов позволяет создавать' +
        ' гибкие и удобные для использования классы.' +
        ' Правильное использование интерфейсов также дает возможность реализовывать множественное наследование,' +
        ' что ещё больше увеличивает гибкость вашего кода.\n',
      active: false,
    },
    {
      question: 'Пользовательские охранники типов (User Defined Type Guards) ',
      response:
        'Пользовательские охранники типов (User Defined Type Guards) в TypeScript — это способ тестирования и проверки типов во время выполнения' +
        ', который позволяет разрабатывать более безопасный и точный код. Они позволяют TypeScript отфильтровывать возможные типы объектов в ' +
        'зависимости от некоторого условия, которое вы определяете. ' +
        'Создание пользовательского охранника типов\n' +
        '\n' +
        'Для создания пользовательского охранника типов используется пользовательская функция с возвращаемым значением в виде логического выражения и определённый оператор is.' +
        'Это особенно полезно в случаях, когда вам нужно определить, является ли переменная конкретным типом, особенно когда вы работаете с объединёнными типами.\n' +
        'typeof и instanceof относятся к механизму защиты типов (type guard) в TypeScript. Они помогают определять, какой именно тип данных вы имеете, и ' +
        'позволяют обеспечить безопасность типов в вашем коде.' +
        'typeof — это оператор, который возвращает строковое представление типа переменной. В TypeScript его можно использовать для создания пользовательских защит типов' +
        'instanceof — это оператор, который проверяет, принадлежит ли объект определенному классу или его наследнику. Это также может быть использовано в качестве охранного ' +
        'механизма для конкретных классов',
      active: false,
    },
    {
      question: 'Enum в TypeScript',
      response:
        'Enums (перечисления) в TypeScript — это способ определения наборов связанных констант. Они помогают организовать код ' +
        'и делают его более читаемым, понятным и удобным для сопровождения. Enums могут быть числовыми, строковыми или гибридными.' +
        'Перечисления имеют область видимости. Это значит, что их нельзя использовать вне тех модулей или классов, где они определены.' +
        'Enums могут быть удобны в следующем:\n' +
        '\n' +
        '- Читаемость: Они делают ваш код более читаемым, так как вместо чисел или строк вы используете понятные названия.\n' +
        '- Безопасность: Они ограничивают входные параметры, которые могут быть переданы функциям.\n' +
        '- Упрощение поддержки: Изменения, необходимые в будущем, могут быть предложены в одном месте.' +
        '\n' +
        'Enums в TypeScript — это мощный инструмент для организации кода и упрощения использования констант. Они повышают читаемость и безопасность, ' +
        'что делает их полезными в больших и сложных приложениях.\n',
      active: false,
    },
    {
      question: 'Что такое интерфейс?',
      response:
        'Интерфейсы в TypeScript используются для определения структуры объектов. Они позволяют описать типы свойств и методов, которые должен иметь объект.' +
        ' Интерфейсы могут быть расширены и комбинированы, что делает их мощным инструментом для создания сложных типов.',
      active: false,
    },
    {
      question: 'Что можешь рассказать о generics?',
      response:
        'Концепция, позволяющая создавать функции, классы и интерфейсы, которые работают с различными типами данных, не теряя при этом информацию о типах.' +
        'Почему стоит использовать generics?\n' +
        '1. Переиспользование кода: Можно написать функцию или класс один раз и использовать его с различными типами без дублирования кода.\n' +
        '2. Улучшенная безопасность типов: Generics позволяют избегать использования any, что делает ваш код более безопасным и предсказуемым.\n' +
        '3. Читаемость: Генерики делают API более удобными для использования, так как пользователи могут указать тип, с которым они работают.' +
        'Также можно использовать T — обобщенный тип, который принимает тип данных, переданный в функцию. Благодаря этому функция может работать' +
        ' как со строками, так и с числами (или любыми другими типами).',
      active: false,
    },
    {
      question: 'Декораторы и их разновидности',
      response:
        'Декораторы в TypeScript — это специальный вид аннотирования, который позволяет добавлять метаданные к классам, методам, свойствам и параметрам.' +
        ' Они обычно используются для атрибутирования классов, например, в таких библиотеках, как Angular, для создания компонентов и сервисов.' +
        'В TypeScript существует несколько типов декораторов:\n' +
        '\n' +
        '1. Классовые декораторы: используются для аннотирования классов.' +
        'Декоратор класса применяется к классу и может использоваться для изменения его поведения или добавления дополнительных метаданных. ' +
        'Декоратор класса — это функция, которая принимает конструктор класса в качестве аргумента и может возвращать новый конструктор или ' +
        'просто модифицировать исходный.\n' +
        '2. Методные декораторы: добавляют функциональность к методам.\n' +
        'Методные декораторы применяются к методам классов. Они позволяют изменять поведение метода, добавлять к нему дополнительную' +
        ' логику, а также модифицировать его метаданные.\n' +
        '\n' +
        '#### Синтаксис\n' +
        '\n' +
        'Методный декоратор — это функция, которая получает три аргумента:\n' +
        '\n' +
        '1. target: Прототип класса, к которому принадлежит метод.\n' +
        '2. propertyKey: Имя метода.' +
        'Методные декораторы часто используются для:\n' +
        '\n' +
        '1. Логирования: Вы можете логировать информацию о каждом вызове метода.\n' +
        '2. Профилирования: Измерение времени выполнения метода.\n' +
        '3. Проверки прав доступа: Определение, имеет ли пользователь право на выполнение определенного действия.\n' +
        '3. descriptor: Описание метода, которое включает в себя такие свойства, как value, writable, enumerable, и configurable.' +
        '3. Декораторы свойств: позволяют обрабатывать свойства класса.\n' +
        'Декоратор класса применяется к классу и используется для изменения его метаданных или добавления поведения. Декоратор классов — это функция,' +
        ' которая принимает конструктор класса как аргумент и может возвращать новый конструктор.' +
        '4.Параметрические декораторы применяются к параметрам методов и конструкторов. Они принимают три аргумента: целевой класс, имя метода и индекс параметра.',
      active: false,
    },
    {
      question: 'Что такое фабрика декораторов',
      response:
        'Фабрика декораторов в TypeScript — это паттерн проектирования, который позволяет создавать декораторы (например, для классов, методов, свойств и параметров) с использованием дополнительных параметров. Фабрики декораторов позволяют динамически изменять поведение декоратора в зависимости от переданных аргументов.\n' +
        '\n' +
        ' Структура фабрики декораторов\n' +
        '\n' +
        'Фабрика декораторов обычно представляет собой функцию, которая возвращает сам декоратор. Эта функция может принимать параметры, которые используются для настройки декоратора.',
      active: false,
    },
  ],
  active: false,
};
