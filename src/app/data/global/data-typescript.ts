import { IDataQuestion } from '../question/type';

export const dataTS: IDataQuestion = {
  name: 'TypeScript',
  questions: [
    {
      question: 'Что такое TypeScript',
      response:
        'TypeScript - это язык программирования, со строгой типизацией, расширяет возможности JS,\n' +
        '  // обратно совместимый с JS, и компилируется в JS, явная Типизация, поддержка использования ' +
        'классов, возможность подключать модули\n',
      active: false,
    },
    {
      question:
        'Что за операторы & и |, их особенности и различия в TypeScript?',
      response:
        'В TypeScript, как и в JavaScript, операторы & и | используются для выполнения битовых ' +
        'и логических операций.Оператор & (битовый И):\n' +
        '- Выполняет побитовую операцию И.\n' +
        '- Сравнивает соответствующие биты двух чисел и возвращает 1, только если оба бита равны 1.' +
        ' Оператор | (битовый ИЛИ):\n' +
        '- Выполняет побитовую операцию ИЛИ.\n' +
        '- Возвращает 1, если хотя бы один из битов равен 1.' +
        'В контексте работы с типами, & может использоваться для создания пересечения типов, а | — для объединения типов.',
      active: false,
    },
    {
      question:
        'Как в TypeScript реализовать свойство класса являющуюся константой?',
      response:
        'В TypeScript вы можете реализовать свойство класса как константу, используя модификатор доступа readonly.' +
        ' Это свойство будет доступно только для чтения после его инициализации(вы не сможете его изменить после создания экземпляра класса.).',
      active: false,
    },
    {
      question:
        'Расскажи про классы? Если я хочу переопределить в дочернем классе конструктор, есть\n' +
        'ли с этим какая-то особенность? let, const? Если я в const запишу объект, я смогу его\n' +
        'менять?',
      response:
        'Классы в TypeScript\n' +
        'Классы в TypeScript используются для создания объектов с определенной структурой и поведением. Вы можете определять методы и свойства внутри классов.\n' +
        '\n' +
        '### Переопределение конструктора\n' +
        'Если вы хотите переопределить конструктор в дочернем классе, вам нужно вызвать конструктор ' +
        'родительского класса с помощью super().' +
        ' Это позволяет инициализировать свойства, унаследованные от родительского класса.' +
        'let и const\n' +
        '- let и const — это ключевые слова для объявления переменных в JavaScript и TypeScript.\n' +
        '- let: позволяет изменять значение переменной.\n' +
        '- const: создаёт константу, значение которой нельзя переназначить. Однако, если const используется для ' +
        'объявления объекта, сам объект можно изменять (изменение свойств объекта допустимо).' +
        'Таким образом, использование const не ограничивает изменения свойств объекта, но запрещает переназначение самой переменной.',
      active: false,
    },
    {
      question: 'Что представляют собой .map-файлы в TypeScript?',
      response:
        '.map-файлы (source map files) в TypeScript представляют собой файлы, которые связывают скомпилированный JavaScript-код ' +
        'с его исходным кодом на TypeScript. Это позволяет разработчикам отлаживать и анализировать код в браузере' +
        ' или других средах, используя оригинальный TypeScript-код вместо скомпилированного JavaScript.\n' +
        '\n' +
        '### Основные особенности .map-файлов:\n' +
        '1. Отладка: Включение .map-файлов позволяет разработчикам устанавливать точки останова и ' +
        'просматривать переменные в исходном коде TypeScript, что упрощает отладку.\n' +
        '2. Соответствие строк: Они сохраняют информацию о том, какие строки исходного кода соответствуют ' +
        'строкам скомпилированного JavaScript-кода, что помогает понять оптимизированный код.\n' +
        '3. Автоматическая генерация: .map-файлы могут быть автоматически сгенерированы TypeScript-компилятором,' +
        ' если в файле конфигурации tsconfig.json установлен флаг "sourceMap": true.',
      active: false,
    },
    {
      question: 'Что такое геттеры и сеттеры в TypeScript?',
      response:
        'Геттеры и сеттеры в TypeScript представляют собой специальные методы, которые позволяют управлять доступом к' +
        ' свойствам объекта. Они помогают инкапсулировать логику доступа к свойству и могут использоваться' +
        ' для выполнения дополнительных операций при получении или установке значений.' +
        '- Геттеры позволяют получать значения свойств и могут содержать логику.\n' +
        '- Сеттеры позволяют устанавливать значения свойств и могут содержать валидацию или обработку.\n' +
        '- Они помогают инкапсулировать логику доступа к свойствам, обеспечивая большую гибкость и контроль.',
      active: false,
    },
    {
      question: 'Можно ли использовать TypeScript на бэке?',
      response:
        'Да, TypeScript можно использовать на бэкенде. TypeScript является ' +
        'надмножеством JavaScript, что означает, что любой код JavaScript является допустимым ' +
        'кодом TypeScript. Это делает его удобным для разработки серверных приложений с использованием' +
        ' технологий, которые работают на JavaScript, таких как Node.js.\n' +
        '\n' +
        '### Преимущества использования TypeScript на бэкенде:\n' +
        '\n' +
        '1. Статическая типизация: TypeScript предоставляет систему типов, которая помогает избежать' +
        ' многих ошибок, связанных с неправильными типами данных, еще на этапе компиляции.\n' +
        '\n' +
        '2. Улучшенная поддержка IDE: Благодаря типизации, редакторы кода предоставляют более умные подсказки,' +
        ' автодополнение и помощь с рефакторингом, что повышает производительность разработки.\n' +
        '\n' +
        '3. Совместимость с JavaScript: Вы можете использовать любой JavaScript-код и библиотеки в TypeScript,' +
        ' что позволяет интегрировать его с существующими проектами.\n' +
        '\n' +
        '4. Проще поддерживать: Строгая типизация помогает разработчикам, работающим в команде, лучше понимать' +
        ' код и его интерфейсы, что упрощает поддержку и развитие проекта.\n' +
        '\n' +
        '5. Современные возможности JavaScript: TypeScript поддерживает современные возможности JavaScript, такие' +
        ' как асинхронные функции, классы и модули.\n',
      active: false,
    },
    {
      question:
        'Поддерживает ли TypeScript перегрузку функций? Как это реализовать?',
      response:
        'Перегрузка функций — это возможность определять несколько версий одной и той же функции с разными наборами ' +
        'параметров. Это позволяет функции обрабатывать различные типы входных данных или разное' +
        ' количество аргументов и возвращать соответствующий результат в зависимости от входных параметров.' +
        'Да, TypeScript поддерживает перегрузку функций. Это позволяет вам определять несколько сигнатур для одной функции,' +
        ' что помогает обеспечить большую гибкость и удобство использования функции в зависимости от переданных параметров.' +
        'Для реализации перегрузки функций вы можете определить несколько сигнатур функций, а затем реализовать одну версию функции, ' +
        'которая будет обрабатывать логику в зависимости от параметров. Сначала определяются сигнатуры, затем реализация.',
      active: false,
    },
    {
      question: 'В чем разница между interface и type в TypeScript?\n',
      response:
        'В TypeScript как interface, так и type используются для описания структур данных и типов, но между ' +
        'ними есть некоторые различия, которые стоит учитывать. Ниже приведены основные отличия:\n' +
        '\n' +
        '1. Основное назначение\n' +
        '- interface:\n' +
        '- Предназначен в первую очередь для описания объектов и классов. Он позволяет определять структуры' +
        ' данных и контракты, которые классы могут реализовывать.\n' +
        '\n' +
        '- type:\n' +
        '- Более универсален и может представлять различные типы, включая примитивные, объединения, кортежи и другие.' +
        '2. Расширяемость\n' +
        '- interface:\n' +
        '- Поддерживает наследование. Вы можете расширять (наследовать) несколько интерфейсов, создавая новый ' +
        'интерфейс на основе существующего.' +
        '- type:\n' +
        '- Использует оператор пересечения (&) для объединения типов, но не поддерживает "наследование" в том смысле,' +
        ' как это делает interface.' +
        ' 3. Объявление объектов\n' +
        '- interface:\n' +
        '- Можете объявить один и тот же интерфейс несколько раз, и они будут объединены в одно определение.' +
        ' Это позволяет легко добавлять новые свойства к существующим интерфейсам.\n' +
        '- type:\n' +
        '- Не поддерживает множественные объявления. Если вы попытаетесь объявить одно и то же ' +
        'type дважды, TypeScript выдаст ошибку.' +
        '4. Альтернативные типы\n' +
        '- interface:\n' +
        '- Более ограничен в своих возможностях. Обычно используется для объектов и классов.\n' +
        '\n' +
        '- type:\n' +
        '- Может быть использован для определения примитивов, объединений, кортежей и других типов данных.' +
        'аключение\n' +
        '- Используйте interface, когда вы хотите определить структуру объекта или класс, ' +
        'особенно если планируете расширять типы данных в будущем.\n' +
        '- Используйте type, когда вам нужно создать более сложный тип с помощью объединений, пересечений ' +
        'или когда вы работаете с примитивами и не объектами.',
      active: false,
    },
    {
      question: 'Что такое утиная типизация?',
      response:
        ' Утиная типизация (duck typing) — это концепция в динамически типизированных языках программирования, ' +
        'которая основывается на проверке поведения объектов, а не их конкретном типе. Основной принцип ' +
        'утиной типизации заключается в том, что если объект ("утка") выглядит и ведет себя как другой объект' +
        ' (например, имеет необходимые методы и свойства), то его можно использовать в месте, где ожидается этот другой объект.\n' +
        '\n' +
        'Происхождение термина\n' +
        'Название "утиная типизация" происходит из известной фразы: "Если оно ходит как утка и крякает как' +
        ' утка, то это, вероятно, утка". Это означает, что в контексте программирования объект не обязательно ' +
        'должен быть строго определенного типа, чтобы выполнять определенные действия или быть использованным в конкретном контексте.\n' +
        'Утиная типизация в TypeScript\n' +
        'TypeScript, в отличие от динамически типизированных языков, использует строгую типизацию, но поддерживает концепцию' +
        ' утинообразной типизации путем использования интерфейсов и неявных типов.' +
        'Преимущества утиної типизации:\n' +
        '1. Гибкость: Код может работать с любым объектом, который реализует нужные методы, что делает его более универсальным.\n' +
        '2. Упрощение: Не нужно явно определять тип объектов, что уменьшает количество кода и повышает читаемость.\n' +
        '3. Простота модификации: Объекты могут быть легко заменены, если они имеют необходимое поведение.\n' +
        '\n' +
        '### Недостатки утиної типизации:\n' +
        '1. Ошибки времени выполнения: Так как проверки проводятся во время выполнения, ' +
        'могут возникать ошибки, которые не будут замечены на этапе компиляции (если язык поддерживает статическую типизацию).\n' +
        '2. Сложности отладки: Поскольку нет четкого определения типа, отладка может стать сложнее,' +
        ' особенно в больших и сложных кодовых базах.\n',
      active: false,
    },
    {
      question: 'Что такое union type?',
      response:
        'Union type (объединяющий тип) в TypeScript — это тип, который может представлять одно из нескольких значений. ' +
        'Он позволяет объединить несколько типов в один,' +
        ' что дает возможность переменной хранить значения различных типов в зависимости от ситуации. Это помогает' +
        ' создавать более гибкий и выразительный код, позволяя точно описывать возможные значения, которые переменная может принимать.\n',
      active: false,
    },
    {
      question:
        'Как сводить к определенному типу в TypeScript? (type assertion)\n',
      response:
        ' В TypeScript вы можете использовать приведение типов (type assertion) для указания компилятору,' +
        ' что значение имеет определенный тип, даже если TypeScript не может автоматически определить его. Это полезно,' +
        ' когда вы точно знаете, что переменная или выражение имеют определенный тип, но TypeScript не может' +
        ' это вывести. Приведение типов помогает избежать ошибок и сделать код более понятным.' +
        'В TypeScript есть два способа осуществления приведения типов:\n' +
        '\n' +
        '1. Синтаксис с as (someValue as string)' +
        '2. Синтаксис с угловыми скобками (<>) (<string>someValue)' +
        'Когда использовать приведение типов?\n' +
        '\n' +
        '- При работе с неявно типизированными значениями: Если вы получаете значения' +
        ' из внешних источников, таких как API или пользовательский ввод, и вы точно знаете, какие типы ' +
        'данных эти значения должны иметь.\n' +
        '\n' +
        '- Когда TypeScript не может автоматически вывести тип: Например, когда у вас есть переменная с' +
        ' типом any или unknown, и вы уверены в ее реальном типе.',
      active: false,
    },
    {
      question: 'Как проверить тип объекта в TypeScript?',
      response:
        'В TypeScript вы можете проверить тип объекта несколькими способами. Наиболее распространенные ' +
        'методы включают использование оператора typeof, операторов in, а также собственных функций для' +
        ' проверки типов. Давайте рассмотрим каждый из методов подробнее.\n' +
        '\n' +
        '1. Использование оператора typeof\n' +
        '\n' +
        'Оператор typeof позволяет проверять тип примитивных значений (например, string, number, boolean и т. д.).' +
        ' Однако он не работает с объектами и массивами, так как для этих типов он всегда возвращает "object".' +
        '2. Проверка с помощью оператора instanceof\n' +
        '\n' +
        'Оператор instanceof позволяет проверять, является ли объект экземпляром определенного класса или' +
        ' конструктора, что полезно для проверки пользовательских объектов и классов.' +
        '3. Проверка свойств объекта с помощью оператора in\n' +
        '\n' +
        'Вы можете проверить наличие определенного свойства в объекте, используя оператор in. Это особенно полезно,' +
        ' когда вы работаете с объектами и хотите проверить, имеет ли объект определенные поля.' +
        '4. Пользовательские функции проверки типа\n' +
        '\n' +
        'Если вы работаете с объектами с более сложной структурой или интерфейсами, вы можете написать' +
        ' пользовательские защитные функции (type guards) для более точной проверки типов.\n' +
        '5. Проверка типов с использованием Array.isArray\n' +
        '\n' +
        'Если вам необходимо определить, является ли объект массивом, вы можете использовать встроенный метод Array.isArray().',
      active: false,
    },
    {
      question: 'Когда в TypeScript используется ключевое слово declare?',
      response:
        'Ключевое слово declare в TypeScript используется для объявления типов, которые существуют вне' +
        ' контекста вашего проекта, и помогает TypeScript правильно интерпретировать эти типы. Это ' +
        'особенно полезно при работе с глобальными переменными, библиотеками на JavaScript, чьи' +
        ' типы не описаны, и при написании объявлений модулей. Вот несколько случаев, когда используется declare:' +
        '1. Объявление глобальных переменных\n' +
        '\n' +
        'Если вы используете глобальные переменные, которые не объявлены в ваших TypeScript-файлах,' +
        ' вы можете использовать declare, чтобы сообщить компилятору о существовании этих переменных.' +
        ' 2. Объявление функций\n' +
        '\n' +
        'Если у вас есть функции, которые определены глобально (например, в JavaScript-библиотеках), и вы хотите ' +
        'использовать их в вашем коде TypeScript, вы можете объявить эти функции с помощью declare.' +
        '3. Объявление пространств имен (namespace)\n' +
        '\n' +
        'Вы можете использовать declare для определения пространств имен в проекте. Это помогает ' +
        'организации кода и устранению конфликтов имен.' +
        '4. Объявление модулей\n' +
        '\n' +
        'Если вы работаете с модулями, которые не имеют типовых определений (например, сторонние JavaScript-библиотеки),' +
        ' вы можете использовать declare module для объявления модуля и его типов.' +
        '5. Объявление интерфейсов и типов\n' +
        '\n' +
        'Вы можете использовать declare в сочетании с интерфейсами или типами, чтобы указать, что вы ' +
        'описываете существующие структуры, которые будут использоваться в вашем коде.' +
        '6. Объявления типов для файлов\n' +
        '\n' +
        'При разработке крупных приложений часто возникает необходимость добавления типовых определений для файлов или библиотек. ' +
        'Это может быть сделано с помощью declare в *.d.ts файлах (файлы объявлений), которые позволяют вам разделить типы от логики кода.',
      active: false,
    },
    {
      question:
        'Расскажите об основных компонентах TypeScript? (язык, компилятор, вспомогательные\n' +
        'инструменты)',
      response:
        ' TypeScript — это надмножество JavaScript, предоставляющее статическую типизацию и современные' +
        ' возможности объектно-ориентированного программирования. Он включает несколько основных' +
        ' компонентов, которые работают вместе, чтобы обеспечить удобный процесс разработки. Рассмотрим эти компоненты подробнее:\n' +
        '\n' +
        '### 1. Язык TypeScript\n' +
        '\n' +
        'Основные особенности языка TypeScript:\n' +
        '- Статическая типизация: TypeScript позволяет разработчикам явно указывать типы переменных,' +
        ' аргументов и возвращаемых значений функций. Это помогает обнаруживать ошибки на этапе компиляции, а не во время выполнения.\n' +
        '- Интерфейсы и типы: TypeScript предоставляет возможность описывать сложные структуры данных с помощью интерфейсов и' +
        ' пользовательских типов, что способствует более четкой организации кода и его повторному использованию.' +
        '- Поддержка современных возможностей JavaScript: TypeScript реализует новейшие возможности' +
        ' ES (ECMAScript), включая классы, деструктуризацию, стрелочные функции и т. д. Эти возможности помогают' +
        ' писать чистый и современный код.\n' +
        '\n' +
        '- Декораторы: TypeScript поддерживает экспериментальные возможности, такие как декораторы,' +
        ' которые используются для аннотирования классов и их свойств. Это может быть полезно в' +
        ' контексте создания фреймворков и библиотек.' +
        '2. Компилятор TypeScript\n' +
        '\n' +
        'Компилятор TypeScript (tsc) преобразует код TypeScript в чистый JavaScript. Основные аспекты компилятора:\n' +
        '\n' +
        '- tsc: Это командная утилита, которая принимает .ts файлы и генерирует соответствующий .js код.' +
        ' Вы можете запускать его из командной строки или интегрировать в ваш процесс сборки.\n' +
        '\n' +
        '- Конфигурация: Вы можете настраивать компилятор с помощью файла tsconfig.json, в котором' +
        ' задаются пути и параметры компиляции,' +
        ' такие как уровень строгости, целевая версия ECMAScript и используемые библиотеки.\n' +
        '- Инкрементальная компиляция: TypeScript поддерживает инкрементальную компиляцию, что позволяет ' +
        'сокращать время сборки при изменении небольшого количества файлов.' +
        '3. Вспомогательные инструменты\n' +
        '\n' +
        'TypeScript включает в себя различные вспомогательные инструменты и экосистему, которая помогает в разработке:\n' +
        '\n' +
        '- Редакторы и IDE: Многие популярные редакторы и среда разработки, такие как Visual Studio Code, WebStorm,' +
        ' и даже Sublime Text, имеют встроенную поддержку TypeScript, включая автодополнение, подсказки и проверки типов.\n' +
        '\n' +
        '- Type Declaration Files: Для работы с JavaScript-библиотеками, которые не имеют ' +
        'встроенной поддержки типов, вы можете использовать файлы деклараций (.d.ts), которые ' +
        'описывают типы этих библиотек. Это позволяет обращаться к библиотекам с TypeScript, ' +
        'сохраняя при этом безопасность типов.\n' +
        '\n' +
        '- Библиотеки типов: Существуют также репозитории, такие как DefinitelyTyped, которые содержат' +
        ' наборы объявлений для всех популярных JavaScript-библиотек и фреймворков. Вы можете' +
        ' устанавливать их с помощью npm (например, npm install @types/lodash).\n' +
        '\n' +
        '- Инструменты сборки**: TypeScript можно интегрировать с различными инструментами сборки, ' +
        'такими как Webpack или Gulp. Это позволяет автоматизировать процесс компиляции и оптимизации кода.',
      active: false,
    },
    {
      question:
        ' Можно ли в TypeScript использовать строго типизированные функции использовать в\n' +
        'качестве параметров?',
      response:
        'Да, в TypeScript вы можете использовать строго типизированные функции в качестве параметров других функций. ' +
        'Это называется "функциональный параметр" или "функция обратного вызова" (callback function).' +
        ' Вы можете определить тип параметров, которые принимает функция, а также тип значения, которое она возвращает.',
      active: false,
    },
    {
      question:
        ' Как сделать классы объявленные внутри модуля доступными извне?',
      response:
        'В TypeScript, если вы хотите сделать классы, объявленные внутри модуля, доступными извне, необходимо использовать' +
        ' модификатор доступа export. Это позволит экспортировать класс из модуля, и другие модули смогут импортировать его.',
      active: false,
    },
    {
      question: 'Типизация в typescript',
      response:
        '2.let, const - переменные, функции принимают значение с типизацией и возвращают типизированное значение\n' +
        '         Типы данных -\n' +
        '        boolean,\n' +
        '        number,\n' +
        '        string,\n' +
        '        Array,\n' +
        '        unknown,\n' +
        '        any,\n' +
        '        symbol,\n' +
        '        null,\n' +
        '        undefined,\n' +
        '        never,\n' +
        '        кортеж\n' +
        '        Совместимость типов\n' +
        '        Сравнение двух типов  - если сравнить два интерфейса у одного два поля у другого 3 таких же и еще 1 то при\n' +
        '        сравнении меньшего с большим true, иначе false, также при сравнении функций и их ожидаемое значение\n' +
        'Typescript — это надстройка над JavaScript, которая добавляет статическую типизацию. Это означает, что вы можете явно указывать' +
        ' типы данных, что позволяет улучшить качество кода и выявить ошибки на этапе компиляции, вместо того чтобы находить их во время ' +
        'выполнения. Вот подробности о типизации в TypeScript:\n' +
        '\n' +
        '1. Основные типы данных\n' +
        '\n' +
        'TypeScript поддерживает несколько основных типов, которые можно использовать при объявлении переменных:\n' +
        '\n' +
        '- number: для чисел (например, 1, 2.5).\n' +
        '- string: для строк (например, "Hello", "TypeScript").\n' +
        '- boolean: для логических значений (true/false).\n' +
        '- array: массивы могут быть объявлены с использованием синтаксиса массивов (например, number[] для массива чисел) или' +
        ' с использованием обобщений (например, Array <`number`>).\n' +
        '- tuple: кортежи позволяют создавать массивы с фиксированной длиной и фиксированными типами (например, [string, number] для массива,' +
        ' содержащего строку и число).\n' +
        '- enum: позволяет создавать набор именованных констант (например, enum Color { Red, Green, Blue }).\n' +
        '- any: тип, который позволяет присваивать значения любого типа. Используется, когда вам не нужно жесткое соблюдение типов,' +
        ' но стоит использовать его с осторожностью.\n' +
        '- void: используется для обозначения функций, которые ничего не возвращают.\n' +
        '- null и undefined: представляют собой отсутствие значения или неопределенное значение.\n' +
        '\n' +
        '### 2. Явная и неявная типизация\n' +
        '\n' +
        '- Явная типизация: Вы можете явно указывать тип переменной при ее объявлении.' +
        '- Неявная типизация: TypeScript может автоматически выводить тип переменной на основании присвоенного значения.' +
        '3.Функции и типы' +
        '4.Интерфейсы и типы объектов' +
        '5. Объединения и пересечения типов\n' +
        '\n' +
        '- Объединение типов (Union Types) позволяет переменной принимать значения нескольких типов' +
        '- Пересечения типов (Intersection Types) позволяют комбинировать несколько типов возможных свойств' +
        '6. Типизация в классах\n' +
        '7. Дженерики\n' +
        'Дженерики позволяют писать обобщенные функции и классы, которые работают с разными типами данных' +
        '8. Типы без значения (Type Aliases)\n' +
        '\n' +
        'Вы можете создавать алиасы для типов с помощью оператора type' +
        'Типизация в TypeScript помогает создавать более безопасный и сопровождённый код. Определение типов предварительно позволяет' +
        ' избежать многих распространённых ошибок, улучшить читаемость кода и упростить его сопровождение.' +
        ' Использование TypeScript является особенно полезным в крупных и сложных приложениях, где упростить работу с типами становится критически важным.',
      active: false,
    },
    {
      question: 'Наследование в TypeScript',
      response:
        'механизм, который позволяет создавать новые классы на основе уже существующих. Это позволяет переиспользовать ' +
        'код и организовывать его более структурированно. TypeScript поддерживает как однонаследование (один класс может наследоваться от одного родительского),' +
        ' так и интерфейсы, которые могут использоваться для создания множественных наследований.\n' +
        '\n' +
        ' Основные аспекты наследования в TypeScript:\n' +
        '\n' +
        ' 1. Классы и наследование\n' +
        '\n' +
        'В TypeScript вы можете создавать классы и наследовать их, используя ключевое слово extends. Когда класс наследует другой класс, он получает доступ ко' +
        ' всем его свойствам и методам.' +
        '2. Конструктор в наследуемом классе\n' +
        '\n' +
        'Если у родительского класса есть конструктор, вы должны вызывать его из дочернего класса с помощью super()' +
        '3. Свойства и методы\n' +
        '\n' +
        'Дочерний класс может использовать как свойства и методы родительского класса, так и определять свои собственные.' +
        '4. Модификаторы доступа\n' +
        '\n' +
        'TypeScript поддерживает три модификатора доступа: public, protected и private.\n' +
        '\n' +
        '- Public: Свойства и методы доступны из любого места.\n' +
        '- Protected: Свойства и методы доступны только внутри класса и его подклассов.\n' +
        '- Private: Свойства и методы доступны только внутри класса' +
        '5. Интерфейсы и множественное наследование\n' +
        '\n' +
        'TypeScript поддерживает интерфейсы и может реализовывать множественное наследование через их реализацию.' +
        'Наследование в TypeScript предоставляет мощный способ организации кода, увеличивая его повторное использование' +
        ' и облегчая поддержание. Использование модификаторов доступа, конструкторов и переопределений методов позволяет создавать' +
        ' гибкие и удобные для использования классы.' +
        ' Правильное использование интерфейсов также дает возможность реализовывать множественное наследование,' +
        ' что ещё больше увеличивает гибкость вашего кода.\n',
      active: false,
    },
    {
      question: 'Пользовательские охранники типов (User Defined Type Guards) ',
      response:
        'Пользовательские охранники типов (User Defined Type Guards) в TypeScript — это способ тестирования и проверки типов во время выполнения' +
        ', который позволяет разрабатывать более безопасный и точный код. Они позволяют TypeScript отфильтровывать возможные типы объектов в ' +
        'зависимости от некоторого условия, которое вы определяете. ' +
        'Создание пользовательского охранника типов\n' +
        '\n' +
        'Для создания пользовательского охранника типов используется пользовательская функция с возвращаемым значением в виде логического выражения и определённый оператор is.' +
        'Это особенно полезно в случаях, когда вам нужно определить, является ли переменная конкретным типом, особенно когда вы работаете с объединёнными типами.\n' +
        'typeof и instanceof относятся к механизму защиты типов (type guard) в TypeScript. Они помогают определять, какой именно тип данных вы имеете, и ' +
        'позволяют обеспечить безопасность типов в вашем коде.' +
        'typeof — это оператор, который возвращает строковое представление типа переменной. В TypeScript его можно использовать для создания пользовательских защит типов' +
        'instanceof — это оператор, который проверяет, принадлежит ли объект определенному классу или его наследнику. Это также может быть использовано в качестве охранного ' +
        'механизма для конкретных классов',
      active: false,
    },
    {
      question: 'Enum в TypeScript',
      response:
        'Enums (перечисления) в TypeScript — это способ определения наборов связанных констант. Они помогают организовать код ' +
        'и делают его более читаемым, понятным и удобным для сопровождения. Enums могут быть числовыми, строковыми или гибридными.' +
        'Перечисления имеют область видимости. Это значит, что их нельзя использовать вне тех модулей или классов, где они определены.' +
        'Enums могут быть удобны в следующем:\n' +
        '\n' +
        '- Читаемость: Они делают ваш код более читаемым, так как вместо чисел или строк вы используете понятные названия.\n' +
        '- Безопасность: Они ограничивают входные параметры, которые могут быть переданы функциям.\n' +
        '- Упрощение поддержки: Изменения, необходимые в будущем, могут быть предложены в одном месте.' +
        '\n' +
        'Enums в TypeScript — это мощный инструмент для организации кода и упрощения использования констант. Они повышают читаемость и безопасность, ' +
        'что делает их полезными в больших и сложных приложениях.\n',
      active: false,
    },
    {
      question: 'Что такое интерфейс?',
      response:
        'Интерфейсы в TypeScript используются для определения структуры объектов. Они позволяют описать типы свойств и методов, которые должен иметь объект.' +
        ' Интерфейсы могут быть расширены и комбинированы, что делает их мощным инструментом для создания сложных типов.',
      active: false,
    },
    {
      question: 'Что можешь рассказать о generics?',
      response:
        'Концепция, позволяющая создавать функции, классы и интерфейсы, которые работают с различными типами данных, не теряя при этом информацию о типах.' +
        'Почему стоит использовать generics?\n' +
        '1. Переиспользование кода: Можно написать функцию или класс один раз и использовать его с различными типами без дублирования кода.\n' +
        '2. Улучшенная безопасность типов: Generics позволяют избегать использования any, что делает ваш код более безопасным и предсказуемым.\n' +
        '3. Читаемость: Генерики делают API более удобными для использования, так как пользователи могут указать тип, с которым они работают.' +
        'Также можно использовать T — обобщенный тип, который принимает тип данных, переданный в функцию. Благодаря этому функция может работать' +
        ' как со строками, так и с числами (или любыми другими типами).',
      active: false,
    },
    {
      question: 'Декораторы и их разновидности',
      response:
        'Декораторы в TypeScript — это специальный вид аннотирования, который позволяет добавлять метаданные к классам, методам, свойствам и параметрам.' +
        ' Они обычно используются для атрибутирования классов, например, в таких библиотеках, как Angular, для создания компонентов и сервисов.' +
        'В TypeScript существует несколько типов декораторов:\n' +
        '\n' +
        '1. Классовые декораторы: используются для аннотирования классов.' +
        'Декоратор класса применяется к классу и может использоваться для изменения его поведения или добавления дополнительных метаданных. ' +
        'Декоратор класса — это функция, которая принимает конструктор класса в качестве аргумента и может возвращать новый конструктор или ' +
        'просто модифицировать исходный.\n' +
        '2. Методные декораторы: добавляют функциональность к методам.\n' +
        'Методные декораторы применяются к методам классов. Они позволяют изменять поведение метода, добавлять к нему дополнительную' +
        ' логику, а также модифицировать его метаданные.\n' +
        '\n' +
        '#### Синтаксис\n' +
        '\n' +
        'Методный декоратор — это функция, которая получает три аргумента:\n' +
        '\n' +
        '1. target: Прототип класса, к которому принадлежит метод.\n' +
        '2. propertyKey: Имя метода.' +
        'Методные декораторы часто используются для:\n' +
        '\n' +
        '1. Логирования: Вы можете логировать информацию о каждом вызове метода.\n' +
        '2. Профилирования: Измерение времени выполнения метода.\n' +
        '3. Проверки прав доступа: Определение, имеет ли пользователь право на выполнение определенного действия.\n' +
        '3. descriptor: Описание метода, которое включает в себя такие свойства, как value, writable, enumerable, и configurable.' +
        '3. Декораторы свойств: позволяют обрабатывать свойства класса.\n' +
        'Декоратор класса применяется к классу и используется для изменения его метаданных или добавления поведения. Декоратор классов — это функция,' +
        ' которая принимает конструктор класса как аргумент и может возвращать новый конструктор.' +
        '4.Параметрические декораторы применяются к параметрам методов и конструкторов. Они принимают три аргумента: целевой класс, имя метода и индекс параметра.',
      active: false,
    },
    {
      question: 'Что такое фабрика декораторов',
      response:
        'Фабрика декораторов в TypeScript — это паттерн проектирования, который позволяет создавать' +
        ' декораторы (например, для классов, методов, свойств и параметров) с использованием дополнительных ' +
        'параметров. Фабрики декораторов позволяют динамически изменять поведение декоратора в зависимости от переданных аргументов.\n' +
        '\n' +
        ' Структура фабрики декораторов\n' +
        '\n' +
        'Фабрика декораторов обычно представляет собой функцию, которая возвращает сам декоратор.' +
        ' Эта функция может принимать параметры, которые используются для настройки декоратора.',
      active: false,
    },
    {
      question: 'Когда вы видите полезность TypeScript?',
      response:
        '1. Большие и сложные проекты\n' +
        '- Упрощение управления типами: В больших кодовых базах сложность ' +
        'управления типами увеличивается. TypeScript предоставляет статическую ' +
        'типизацию, что помогает избегать ошибок, которые могут возникнуть при динамической типизации JavaScript.\n' +
        '- Структурирование кода: TypeScript позволяет использовать интерфейсы и ' +
        'типы, что улучшает структуру и архитектуру приложения.\n' +
        '\n' +
        '### 2. Командная работа\n' +
        '- Улучшенная читаемость кода: Статическая типизация делает код более понятным' +
        ' для других разработчиков. Определение типов функций и объектов облегчает понимание того, как должно использоваться API.\n' +
        '- Документация: Типы могут служить само-документацией, так как они описывают,' +
        ' что ожидается на входе и выходе функций.\n' +
        '\n' +
        '### 3. Обнаружение ошибок на этапе компиляции\n' +
        '- Раннее обнаружение ошибок: TypeScript позволяет обнаруживать ошибки в коде на' +
        ' этапе компиляции, а не во время выполнения. Это сокращает время на отладку и уменьшает' +
        ' вероятность возникновения ошибок в рабочем коде.\n' +
        '\n' +
        '### 4. Совместимость с существующим JavaScript-кодом\n' +
        '- Постепенное введение: Вы можете постепенно внедрять TypeScript в существующий проект ' +
        'на JavaScript. ' +
        'TypeScript поддерживает существующий JavaScript, что позволяет использовать его с проектами,' +
        ' уже написанными на JavaScript.\n' +
        '\n' +
        '### 5. Работа с современными фреймворками\n' +
        '- Совместимость с фреймворками: TypeScript отлично работает с современными фреймворками, ' +
        'такими как Angular, React и Vue, предоставляя типизацию и улучшенные возможности разработки.\n' +
        '\n' +
        '### 6. Модульность и повторное использование кода\n' +
        '- Интерфейсы и типы: Использование интерфейсов и типов позволяет разрабатывать модульные и' +
        ' повторно используемые компоненты, так как они описывают структуру объектов.\n' +
        '\n' +
        '### 7. Упрощение работы с библиотеками\n' +
        '- Типовые определения: TypeScript позволяет импортировать типовые определения для популярных' +
        ' библиотек (например, с DefinitelyTyped), что помогает избежать ошибок при использовании' +
        ' JavaScript-библиотек.\n' +
        '\n' +
        '### 8. Поддержка современных возможностей JavaScript\n' +
        '- Современные функции: TypeScript добавляет поддержку новейших возможностей и синтаксиса' +
        ' JavaScript, таких как async/await, классы и модули, до того, как они будут официально' +
        ' поддерживаться в всех браузерах.\n' +
        '\n' +
        '### 9. Обучение\n' +
        '- Статическая типизация для новичков: Возможно, TypeScript будет более удобным для новичков,' +
        ' так как он предоставляет больше информации о типах данных и может помочь избежать ошибок благодаря строгой строгой типизации.\n',
      active: false,
    },
  ],
  active: false,
};
