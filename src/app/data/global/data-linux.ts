import { IDataQuestion } from '../question';

export const dataLinux: IDataQuestion = {
  name: 'Linux',
  questions: [
    {
      level: 'Junior',
      title: 'Что такое Linux?',
      response:
        'Это операционная система из семейства Unix - подобных операционных систем,на базе ядра Linux, разработанная Линуксом Товальдсом ',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Основы командной строки',
      response:
        'Основные команды:\n' +
        '- ls: просмотр содержимого директории.\n' +
        '- cd: изменение текущей директории.\n' +
        '- pwd: вывод пути текущей директории.\n' +
        '- cp: копирование файлов и директорий.\n' +
        '- mv: перемещение или переименование файлов и директорий.\n' +
        '- rm: удаление файлов и директорий.\n' +
        '- mkdir: создание новой директории.\n' +
        '- touch: создание нового пустого файла.\n' +
        '- man: просмотр документации и справочной информации по командам. ',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Создание папки ',
      response:
        'Создание папки в Linux можно выполнить с помощью команды mkdir.Чтобы создать новую папку,' +
        ' откройте терминал и введите команду:\n' +
        '\n' +
        '   mkdir имя_папки ',
      active: false,
    },
    {
      level: 'Middle',
      title: 'Смена владельца',
      response:
        'В Linux для изменения владельца файла или директории используется команда chown (от английского "change owner").' +
        ' Эта команда позволяет не только менять владельца, но и группу файла.' +
        'Синтаксис команды\n' +
        '\n' +
        'chown [опции] новый_владелец:новая_группа файл/директория\n' +
        '\n' +
        '\n' +
        '- новый_владелец: Имя пользователя, которому будет передан файл или директория.\n' +
        '- новая_группа (опционально): Имя группы, к которой будет принадлежать файл или директория. Указывается после двоеточия.\n' +
        '- файл/директория: Путь к файлу или директории, для которых нужно изменить владельца.',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Что такое SSH',
      response:
        'SSH (Secure Shell)\n' +
        '\n' +
        'SSH — это протокол, который позволяет безопасно подключаться к удаленному компьютеру или' +
        ' серверу через незащищенную сеть. Он обеспечивает шифрование и аутентификацию, что делает вашу связь защищенной.\n' +
        ' Основные команды и их использование:\n' +
        '\n' +
        '1. Подключение к удаленному серверу:\n' +
        '\n' +
        '   ssh username@hostname\n' +
        '\n' +
        '- username — это имя пользователя на удаленном сервере.\n' +
        '- hostname — это IP-адрес или доменное имя сервера.' +
        '2. Подключение с использованием определенного порта:\n' +
        'Если SSH-сервер работает на нестандартном порту (по умолчанию это 22), используйте флаг -p:\n' +
        '\n' +
        '   ssh -p port_number username@hostname' +
        '3. Использование ключей для аутентификации:\n' +
        'Для более безопасной аутентификации можно использовать SSH-ключи. Сначала создайте ключи (при необходимости) командой:\n' +
        '\n' +
        '   ssh-keygen\n' +
        '\n' +
        'Затем добавьте публичный ключ на удаленный сервер в файл ~/.ssh/authorized_keys.',
      active: false,
    },
    {
      level: 'Middle',
      title: 'Что такое SCP',
      response:
        'SCP (Secure Copy Protocol)\n' +
        '\n' +
        'SCP используется для копирования файлов между локальным и удаленным ' +
        'компьютером через SSH. Это значит, что SCP получает те же преимущества безопасности, что и SSH.\n' +
        '\n' +
        '#### Основные команды и их использование:\n' +
        '\n' +
        '1. Копирование файла с локального компьютера на удаленный сервер:\n' +
        '\n' +
        '   scp /path/to/local/file username@hostname:/path/to/remote/directory\n' +
        '\n' +
        'Пример:\n' +
        '\n' +
        '   scp file.txt user@example.com:/home/user/\n' +
        '\n' +
        '\n' +
        '2. Копирование файла с удаленного сервера на локальный компьютер:\n' +
        '\n' +
        '   scp username@hostname:/path/to/remote/file /path/to/local/directory\n' +
        '\n' +
        'Пример:\n' +
        '\n' +
        '   scp user@example.com:/home/user/file.txt /local/directory/\n' +
        '\n' +
        '\n' +
        '3. Копирование директории:\n' +
        'Чтобы скопировать директорию и все ее содержимое, используйте флаг -r (рекурсивно):\n' +
        '\n' +
        '   scp -r /path/to/local/directory username@hostname:/path/to/remote/directory\n' +
        '\n' +
        'Пример:\n' +
        '\n' +
        '   scp -r /local/directory/ user@example.com:/remote/directory/\n' +
        '\n' +
        '\n' +
        '4. Использование собственного порта для SCP:\n' +
        'Можно указать нестандартный порт с помощью флага -P:\n' +
        '\n' +
        '   scp -P port_number /path/to/local/file username@hostname:/path/to/remote/directory',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Копирование в Linux',
      response:
        'В Linux для копирования файлов и директорий используется команда cp.' +
        'Для копирования директорий измените поведение команды cp с помощью опции -r (или --recursive):\n' +
        '1. Копирование директории:\n' +
        'Используйте следующую команду для копирования всей директории и её содержимого:\n' +
        '\n' +
        '   cp -r source_directory/ destination_directory/' +
        'Полезные опции команды cp\n' +
        '\n' +
        '- Опция -i (interactive): Запрашивает подтверждение перед перезаписью существующих файлов.' +
        '- Опция -u (update): Копирует файл только в том случае, если источник новее, чем назначение,' +
        ' или если файл назначения не существует.' +
        '- Опция -v (verbose): Показывает сообщения о том, какие файлы копируются' +
        '- Опция -a (archive): Копирует файлы и каталоги, сохраняя все атрибуты и структуру, включая символические' +
        ' ссылки, права доступа, владельцев и временные метки',
      active: false,
    },
    {
      level: 'Senior',
      title: ' awk в linux',
      response:
        'awk — это мощный текстовый процессор и язык программирования, используемый для обработки ' +
        'и анализа текстовых файлов и потоковых данных.Читает за один раз строку выполняет определённые действия, а далее выводит результат.' +
        'Он особенно полезен для работы с табличными данными, где данные организованы в столбцы.',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Как убить процесс в Linux?',
      response:
        '1. Использование команды kill\n' +
        '\n' +
        'Команда kill используется для отправки сигналов процессам, в том числе и сигналов для завершения.' +
        'Синтаксис:\n' +
        'kill [опции] PID\n' +
        '\n' +
        '- PID — это идентификатор процесса, который вы хотите завершить.' +
        '2. Использование сигналов\n' +
        '\n' +
        'По умолчанию kill отправляет сигнал SIGTERM (15), который вежливо запрашивает завершение процесса. Вы можете указать другие сигналы:\n' +
        '\n' +
        '- SIGKILL (9): принудительное завершение процесса, которое не может быть игнорировано или поймано.' +
        'kill -9 1234\n' +
        '\n' +
        'Это завершит процесс немедленно.\n' +
        '\n' +
        '- SIGTERM (15): запрос на завершение процесса (по умолчанию).\n' +
        'kill -15 1234' +
        '- SIGINT (2): этот сигнал обычно отправляется при нажатии Ctrl+C в терминале.\n' +
        'kill -2 1234' +
        '3. Использование команды pkill\n' +
        '\n' +
        'Команда pkill позволяет убивать процессы по критериям, таким как имя процесса.' +
        'Синтаксис:\n' +
        'pkill [опции] имя_процесса' +
        'Пример:\n' +
        'Чтобы завершить все процессы с именем myapp:\n' +
        'pkill myapp' +
        ' Использование команды killall\n' +
        '\n' +
        'Команда killall завершает все процессы с указанным именем.' +
        'Синтаксис:\n' +
        'killall [опции] имя_процесса' +
        'Пример:\n' +
        'Чтобы завершить все процессы с именем myapp:\n' +
        'killall myapp' +
        '5. Использование top или htop\n' +
        '\n' +
        'Вы также можете использовать интерактивные утилиты, такие как top или htop, для управления процессами.\n' +
        '\n' +
        '- top: запустите команду top, найдите процесс, который хотите завершить, и запишите его PID. Нажмите k, затем введите PID и сигнал.' +
        '- htop: это более удобный интерфейс (если установлен). Выберите процесс с помощью стрелок, затем нажмите F9 и выберите сигнал для завершения.',
      active: false,
    },
    {
      level: 'Middle',
      title: 'Поиск файлов в Linux',
      response:
        'В Linux для поиска файлов и текстов в файлах используются несколько команд, наиболее распространенные из которых — это find, locate и grep.' +
        'Команда find используется для поиска файлов и директорий по заданным критериям.\n' +
        '\n' +
        'Синтаксис:\n' +
        '\n' +
        'find [путь] [опции] [условия]' +
        '- Поиск файла по имени: Найти файл с именем example.txt в текущем каталоге и всех подкаталогах.\n' +
        '\n' +
        '    find . -name "example.txt"\n' +
        '\n' +
        '\n' +
        '- Поиск всех файлов с определенным расширением: Найти все файлы с расширением .txt.\n' +
        '\n' +
        '    find /path/to/directory -type f -name "*.txt"\n' +
        '\n' +
        '\n' +
        '- Поиск и удаление файлов: Найти и удалить все файлы с расширением .tmp.\n' +
        '\n' +
        '    find /path/to/directory -type f -name "*.tmp" -exec rm {} \\;' +
        '2. Команда locate\n' +
        '\n' +
        'Команда locate используется для быстрого поиска файлов по имени, используя индекс, который обновляется командой updatedb. Это делает locate очень быстрой командой.\n' +
        '\n' +
        '#### Примеры:\n' +
        '- Поиск файла по имени: Найти файл, содержащий слово example.\n' +
        '\n' +
        '    locate example\n' +
        '\n' +
        '\n' +
        '- Поиск с использованием регулярных выражений: Найти файлы, начинающиеся с doc.\n' +
        '\n' +
        '    locate "doc*"\n' +
        '\n' +
        '\n' +
        '> Примечание: Если база данных locate устарела, необходимо обновить ее командой sudo updatedb.' +
        ' 3. Команда grep\n' +
        '\n' +
        'Команда grep используется для поиска текстовых строк, соответствующих заданному шаблону в файлах. Этот инструмент особенно полезен для анализа содержимого файлов.\n' +
        '\n' +
        '#### Синтаксис:\n' +
        '\n' +
        'grep [опции] "шаблон" [файлы]\n' +
        '\n' +
        '\n' +
        '#### Примеры:\n' +
        '- Поиск строки в файле: Найти все строки, содержащие слово error в файле log.txt.\n' +
        '\n' +
        '    grep "error" log.txt\n' +
        '\n' +
        '\n' +
        '- Поиск по всем файлам в директории: Найти все строки с error во всех файлах с расширением .log в текущем каталоге.\n' +
        '\n' +
        '    grep "error" *.log\n' +
        '\n' +
        '\n' +
        '- Рекурсивный поиск: Найти слово foo во всех файлах в текущем каталоге и подкаталогах.\n' +
        '\n' +
        '    grep -r "foo" .\n' +
        '\n' +
        '\n' +
        '- Игнорирование регистра: Найти строки с warning, не обращая внимания на регистр.\n' +
        '\n' +
        '    grep -i "warning" log.txt\n',

      active: false,
    },
  ],
  active: false,
};
