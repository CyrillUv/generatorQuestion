import { IDataQuestion } from '../question/type';

export const dataCss: IDataQuestion = {
  name: 'CSS',
  questions: [
    {
      level: 'Junior',
      title: 'Что такое CSS3 и чем он отличается от предыдущих версий CSS?',
      response:
        'CSS3 (Cascading Style Sheets Level 3) — это третья версия' +
        ' каскадных таблиц стилей, которая используется для описания внешнего' +
        ' вида и формата документа, написанного на HTML или XML (включая такие' +
        ' языки разметки, как SVG и XHTML). CSS3 добавляет новые возможности и ' +
        'улучшения по сравнению с предыдущими версиями, что делает стилизацию веб-страниц более гибкой и мощной.\n' +
        '\n' +
        '### Основные отличия CSS3 от предыдущих версий CSS:\n' +
        '\n' +
        '1. Модули:\n' +
        '- CSS3 организован в виде модулей, каждый из которых отвечает за определенные' +
        ' функции. Это позволяет разработчикам использовать только те части CSS3, которые' +
        ' им нужны, без необходимости загружать весь стандарт.\n' +
        '- Например, есть модули для градиентов, теней, анимаций и т. д.\n' +
        '\n' +
        '2. Новые селекторы:\n' +
        '- CSS3 предлагает множество новых селекторов, таких как :nth-child(), :not(),' +
        ' :first-of-type, и других. Эти селекторы делают выбор элементов более точным и простым.\n' +
        '\n' +
        '3. Градиенты:\n' +
        '- В CSS3 можно использовать градиенты без необходимости в использовании изображений. ' +
        'Благодаря свойству background можно создавать линейные и радиальные градиенты прямо в CSS.\n' +
        '\n' +
        '4. Медиазапросы:\n' +
        '- CSS3 вводит медиазапросы, которые позволяют применять стили в зависимости от различных условий,' +
        ' таких как размер экрана устройства. Это является основой для создания адаптивного дизайна.\n' +
        '\n' +
        '5. Новые свойства для работы с шрифтами:\n' +
        '- CSS3 предоставляет поддержку @font-face, которая позволяет загружать и использовать шрифты ' +
        'на веб-страницах, улучшая типографику и дизайн.\n' +
        '\n' +
        '6. Флексбокс и Grid Layout:\n' +
        '- CSS3 вводит новые единицы и модели компоновки, такие как Flexbox и CSS Grid. ' +
        'Они значительно упрощают создание сложных макетов, позволяя лучше управлять расположением и размером элементов.\n' +
        '\n' +
        '7. Анимации иTransitions:\n' +
        '- В CSS3 можно создавать анимации без использования JavaScript, используя свойства' +
        ' transition и animation. Это позволяет добавлять плавные изменения стилей и анимацию к ' +
        'элементам при взаимодействии с пользователем.\n' +
        '\n' +
        '8. Тени:\n' +
        '- CSS3 позволяет добавлять тени к элементам с помощью свойств box-shadow и text-shadow,' +
        ' что дает больше возможностей для дизайна.\n' +
        '\n' +
        '### Заключение:\n' +
        'CSS3 представляет собой значительное улучшение по сравнению с предыдущими версиями,' +
        ' предоставляя разработчикам мощные инструменты для создания современных и привлекательных ' +
        'веб-интерфейсов. Эти улучшения делают CSS3 более адаптивным, мощным и удобным для работы, ' +
        'что в свою очередь улучшает пользовательский опыт и визуальную привлекательность веб-страниц.',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Какие новые селекторы были добавлены в CSS3? Приведите примеры.',
      response:
        'В CSS3 были добавлены несколько новых селекторов, которые делают выбор элементов более гибким и точным. ' +
        'Вот некоторые из них с примерами использования:\n' +
        '\n' +
        '### 1. Селекторы по псевдоклассам\n' +
        '\n' +
        '- :nth-child(n):\n' +
        '- Выбирает элементы, которые являются n-ыми дочерними элементами своего родителя, где n может быть числом,' +
        ' ключевым словом или формулой.' +
        ':nth-of-type(n):\n' +
        '- Работает аналогично :nth-child(n), но только для элементов определенного типа.' +
        ':first-child и :last-child:\n' +
        '- Селекторы для выбора первого или последнего дочернего элемента.' +
        ':not(selector):\n' +
        '- Выбирает все элементы, которые не соответствуют указанному селектору.' +
        '2. Селекторы по состоянию\n' +
        '\n' +
        '- :hover:\n' +
        '- Селектор для применения стилей при наведении мыши на элемент.' +
        ':focus:\n' +
        '- Селектор для элементов, находящихся в фокусе, например, при клике или при использовании клавиатуры.' +
        '3. Псевдоэлементы\n' +
        '\n' +
        '- ::before и ::after:\n' +
        '- Позволяют добавлять контент перед или после содержимого элемента.' +
        '4. Групповые селекторы\n' +
        '\n' +
        '- :checked:\n' +
        '- Выбирает элементы формы, такие как радио-кнопки или чекбоксы, которые отмечены.' +
        ':disabled и :enabled:\n' +
        '- Выбирает отключенные или включенные элементы формы.',
      active: false,
    },
    {
      level: 'Junior',
      title:
        ' Что такое медиазапросы в CSS3, и как они используются для адаптивного дизайна?',
      response:
        'Медиазапросы (media queries) в CSS3 — это мощный инструмент, который' +
        ' позволяет применять различные стили к документу в зависимости от определённых ' +
        'характеристик устройства, на котором он отображается. Это широко используется для ' +
        'создания адаптивного дизайна, который позволяет веб-страницам выглядеть и работать' +
        ' оптимально на разных устройствах, таких как мобильные телефоны, планшеты и десктопы.\n' +
        '\n' +
        '### Основные функции медиазапросов:\n' +
        '\n' +
        '1. Тargeting Different Devices:\n' +
        '- Медиазапросы позволяют определять параметры устройства, включая ширину экрана, высоту,' +
        ' плотность пикселей и ориентацию (пейзаж или портрет).\n' +
        '\n' +
        '2. Применение различных стилей:\n' +
        '- С помощью медиазапросов возможно изменять стиль элементов в зависимости от устройства,' +
        ' обеспечивая лучшую читаемость и удобство пользователей.\n',
      active: false,
    },
    {
      level: 'Middle',
      title:
        'Какие знаете методологии верстки? (БЭМ, SMACSS, ECSS, RSCSS, OOCSS)',
      response:
        '1. БЭМ (Блок, Элемент, Модификатор)\n' +
        '- Описание: БЭМ (Block, Element, Modifier) — это методология, разработанная для повышения читаемости и повторяемости кода. Она делит интерфейс на независимые блоки, которые могут быть модифицированы.\n' +
        '- Структура:\n' +
        '- Блок: независимый компонент (например, header, menu).\n' +
        '- Элемент: часть блока, не имеющая смысла вне его (например, menu__item).\n' +
        '- Модификатор: модификация блока или элемента (например, button--large, menu--open).' +
        ' 2. SMACSS (Scalable and Modular Architecture for CSS)\n' +
        '- Описание: SMACSS — это методология, направленная на создание масштабируемой и модульной архитектуры CSS. Она делит стили на категории и акцентирует внимание на гибкости и лёгкости поддержки.\n' +
        '- Категории:\n' +
        '- Baseline: основные стили для приложения.\n' +
        '- Layout: стили для глобального макета.\n' +
        '- Module: повторно используемые компоненты.\n' +
        '- State: состояния элементов (например, состояние активности).\n' +
        '- Theme: стили для различных тем оформления.' +
        '3. ECSS (Essential CSS)\n' +
        '- Описание: ECSS — это методология, фокусирующаяся на уменьшении избыточности и упрощении структуры CSS. В ней акцентируется внимание на том, что стили должны отражать структуру HTML.\n' +
        '- Принципы:\n' +
        '- Избегание дублирования свойств.\n' +
        '- Минимизация вложенности.\n' +
        '- Простота и легкость в поддержке.\n' +
        '\n' +
        '### 4. RSCSS (Reasonable System for CSS Styles)\n' +
        '- Описание: RSCSS — это методология, которая акцентирует внимание на ясной структуре, читаемости и легкости поддержки. Она предлагает определенный набор практик для организации стилей.\n' +
        '- Структура:\n' +
        '- Component: ядро стиля элемента.\n' +
        '- Modifier: изменения состояния компонента.\n' +
        '- Namespace: пространство имен для идентификации компонентов.' +
        '5. OOCSS (Object Oriented CSS)\n' +
        '- Описание: OOCSS (Объектно-Ориентированный CSS) — это методология, которая относится к подходу к созданию интерфейсов, пропагандируемому объектно-ориентированным программированием. Основное внимание уделяется разделению структуры и внешнего вида.\n' +
        '- Основные принципы:\n' +
        '- Разделение структуры и кожи: стиль объектов (например, цвета, шрифты) отделяется от их структуры.\n' +
        '- Повторное использование: максимальное использование классов для повторного использования.',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Шаблонизаторы css. Фреймворки на серверной стороне',
      response:
        'Шаблонизаторы CSS и серверные фреймворки играют важную роль в разработке веб-приложений. Давайте рассмотрим их подробнее.\n' +
        '\n' +
        '### Шаблонизаторы CSS\n' +
        'Шаблонизаторы CSS позволяют использовать различные приемы для упрощения написания стилей, создания структуры и переиспользования кода. Вот несколько наиболее распространенных шаблонизаторов и препроцессоров CSS:\n' +
        '\n' +
        '1. Sass (Syntactically Awesome Style Sheets)\n' +
        '- Описание: Sass добавляет к CSS переменные, вложенность, функции и миксины. Он компилируется в стандартный CSS.' +
        '2.LESS\n' +
        '- Описание: LESS также является препроцессором, который добавляет возможности работы с переменными, миксинами и вложенностью.' +
        '3.Stylus\n' +
        '- Описание: Stylus – гибкий и мощный препроцессор, позволяющий писать CSS в более краткой и удобной форме.' +
        ' 4.PostCSS\n' +
        '- Описание: PostCSS — это инструмент для обработки CSS с помощью JavaScript-плагинов. Он может использоваться для добавления переменных, функций и других возможностей, аналогичных Sass и LESS.\n' +
        '- Пример использования: Использование плагинов, таких как autoprefixer для автоматического добавления вендорных префиксов.',
      active: false,
    },
    {
      level: 'Middle',
      title:
        'Основные правила БЭМ. Максимальная вложенность по БЭМ. Где в БЭМ может быть\n' +
        'каскад? Где можно использовать/где нельзя' +
        '',
      response:
        'Основные правила БЭМ\n' +
        '1. Именование:\n' +
        '- Используйте нижнее подчеркивание (_) для разделения блоков и элементов, а также дефис (-) для разделения слов.\n' +
        '- Блоки именуются в единственном числе (например, menu), элементы — в форме block__element (например, menu__item), модификаторы — block--modifier или block__element--modifier (например, button--primary или menu__item--active).\n' +
        '\n' +
        '2. Разделение на блоки и элементы:\n' +
        '- Блок — это независимый компонент, который может использоваться в любом месте и не зависит от других блоков.\n' +
        '- Элемент — это часть блока, смысл которой не имеет значения вне его.\n' +
        '\n' +
        '3. Модификаторы:\n' +
        '- Модификатор определяет вид, состояние или поведение блока или элемента. Он позволяет создать разные вариации одного и того же блока/элемента.\n' +
        '\n' +
        '4. Композиция:\n' +
        '- БЭМ поддерживает композицию, когда один блок может содержать другие блоки. Это помогает структурировать интерфейс без излишней вложенности.\n' +
        '\n' +
        '5. Отсутствие каскадности:\n' +
        '- БЭМ как методология ограничивает использование каскада. Структура классов должна быть такой, чтобы стили можно было легко переопределить без использования каскадных селекторов на основе иерархий.\n' +
        '\n' +
        '### Максимальная вложенность по БЭМ\n' +
        'В БЭМ рекомендованная максимальная вложенность составляет 2-3 уровня. Это позволяет избежать излишней сложности' +
        'Подходы с более глубокой вложенностью усложняют понимание структуры и могут затруднить переиспользование стилей и компонентов.\n' +
        '\n' +
        '### Где в БЭМ может быть каскад?\n' +
        'Каскад может быть использован ограниченно, например:\n' +
        '- Внутри блока, когда некоторые стили блока могут зависеть от состояний модификаторов. Например, вы можете использовать каскад для управления видимостью или размером элементов внутри блока' +
        '## Где можно использовать/где нельзя\n' +
        'Можно использовать:\n' +
        '- Модификаторы для изменения стилей блока или элемента.\n' +
        '- Стилизованные компоненты, которые не относятся к другим блокам, например, кнопки, заголовки и т. д.\n' +
        '\n' +
        'Нельзя использовать:\n' +
        '- Глубокую вложенность в 4 и более уровня (это приводит к усложнению понимания и поддержки).\n' +
        '- Применять CSS-классы через каскад на основе иерархии, чтобы избежать конфликта и непредсказуемого поведения стилей.\n' +
        '- Избегайте избыточности — не дублируйте стили и не создавайте множество модификаторов для одной и той же функциональности.',
      active: false,
    },
    {
      level: 'Middle',
      title: 'border-box особенности, отличия от стандартного',
      response:
        ' Свойство box-sizing в CSS определяет, как рассчитываются размеры элемента, включая его ширину и высоту. Значение border-box — одно из возможных значений для этого свойства, и оно имеет определённые особенности по сравнению со стандартным значением content-box. Давайте рассмотрим эти особенности и отличия:\n' +
        '\n' +
        '### box-sizing: content-box (стандартное значение)\n' +
        '1. Оригинальное значение: Это значение является значением по умолчанию для всех элементов. Когда устанавливается ширина или высота элемента, это значение не включает границы и внутренние отступы (padding).\n' +
        '2. Рассчет размеров: Ширина и высота (width, height) элемента рассчитываются только для внутреннего содержимого, что означает, что если вы добавляете границы или внутренние отступы, они увеличивают общий размер элемента:\n' +
        '- Общий размер элемента = width + padding + border' +
        'box-sizing: border-box\n' +
        '1. Границы и отступы учитываются: Когда box-sizing установлен в border-box, ширина и высота элемента включают в себя как внутренние отступы (padding), так и границы (border). Это значительно упрощает расчет размеров элемента.\n' +
        '2. Рассчет размеров: Размеры элемента устанавливаются более интуитивно, так как они включают в себя все компоненты, и при создании макетов проще контролировать размеры элементов:\n' +
        '- Общий размер элемента = width (включает padding и border)' +
        'content-box' +
        'Как считаются размеры | Только содержимое (width/height) ' +
        'Как рассчитывается общий размер | width + padding + border | width' +
        'Интуитивность | Меньше интуитивно, требует дополнительного расчета ' +
        'Использование | Иногда требует дополнительных вычислений ' +
        ' border-box' +
        'Как считаются размеры | Включает содержимое, padding и border |' +
        'Как рассчитывается общий размер| width равен размеру элемента, включая все | ' +
        'Интуитивность | Более интуитивно и удобно в верстке |' +
        'Использование| Широко используется в адаптивной и гибкой вёрстке |\n',
      active: false,
    },

    {
      level: 'Junior',
      title: 'Что такое уникальность (специфичность) селектора',
      response:
        'Уникальность (или специфичность) селектора в CSS — это мера того, как браузер определяет, какие стили применяются к элементу, когда к нему применяется несколько правил CSS. Специфичность помогает избежать конфликтов и обеспечивает правильное применение стилей, когда несколько селекторов совпадают с одним и тем же элементом. Она рассчитывается на основе различных типов селекторов с учётом их значимости.\n' +
        '\n' +
        '### Как вычисляется специфичность?\n' +
        'Специфичность определяется по системе указателей, которая складывается из разных категорий селекторов. Основные категории и их вес:\n' +
        '\n' +
        '1. Инлайн-стили (1, 0, 0, 0)\n' +
        '- Такие стили применяются непосредственно в атрибуте style элемента HTML.\n' +
        '- Пример: div style="color: red;">.\n' +
        '\n' +
        '2. Идентификаторы (0, 1, 0, 0)\n' +
        '- Стили, определенные через ID селектор. У ID селекторов имеется вес одного пункта.\n' +
        '- Пример: #header.\n' +
        '\n' +
        '3. Классы, псевдоклассы и атрибуты (0, 0, 1, 0)\n' +
        '- Это селекторы классов, псевдоклассов (например, :hover, :nth-child) и атрибутов.\n' +
        '- Пример: .menu, input[type="text"].\n' +
        '\n' +
        '4. Теги и псевдоэлементы (0, 0, 0, 1)\n' +
        '- Селекторы тегов (например, div, p) и псевдоэлементы (например, ::before, ::after).\n' +
        '- Пример: p, div.menu.\n' +
        'Как работает специфичность?\n' +
        'Когда браузер применяет стили, он оценивает специфичность всех соответствующих селекторов. Если два или более селектора применяются к одному элементу, браузер выберет селектор с наивысшей специфичностью. Если специфичность совпадает, то последнее по порядку правило в CSS будет применено.\n' +
        '\n' +
        '### Важные нюансы\n' +
        '- Порядок расположения селекторов в CSS имеет значение. Если два селектора имеют одинаковую специфичность, то применяется последний из них.\n' +
        '- Инлайн-стили имеют наивысшую специфичность и всегда будут применяться, если стилей на уровне внешнего CSS недостаточно.\n' +
        '- Чтобы определить, какой стиль применяется, удобно использовать инструменты разработчика в браузере.',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Какой атрибут делает поле формы обязательным для заполнения?',
      response:
        'Чтобы сделать поле формы обязательным для заполнения в HTML, используется атрибут required. Когда этот атрибут добавлен к элементу формы (например, к input>, textarea>, или select>), браузер будет проверять, заполнено ли это поле перед отправкой формы.\n',
      active: false,
    },
    {
      level: 'Senior',
      title: 'Важны ли стили для SEO?',
      response:
        'Стили (CSS) не влияют напрямую на SEO (поисковую оптимизацию) с точки зрения ранжирования в поисковых системах, но они играют косвенно важную роль в улучшении общего пользовательского опыта и восприятии сайта. Вот несколько аспектов, в которых стили могут повлиять на SEO:\n' +
        '\n' +
        '### 1. Пользовательский опыт\n' +
        '- Время загрузки: Оптимизированные стили могут способствовать более быстрому рендерингу страницы. Быстро загружающиеся сайты с хорошей версткой предлагают лучший пользовательский опыт, что может положительно сказаться на ранжировании.\n' +
        '- Читабельность: Хорошо оформленный текст (например, размер шрифта, цвет, контраст) повышает читабельность, что может снизить показатель отказов и повысить время, проведенное на сайте.\n' +
        '\n' +
        '### 2. Мобильная адаптация\n' +
        '- Отзывчивый дизайн: Стили, которые обеспечивают адаптацию сайта под различные устройства (мобильные, планшеты, компьютеры), важны для SEO, поскольку Google учитывает мобильную версию сайта при поисковой индексации и ранжировании.\n' +
        '- Мобильный пользовательский опыт: Если CSS сайта хорошо оптимизирован и делает контент удобным для просмотра на мобильных устройствах, это может positively wow пользовательский опыт, что тоже важно для SEO.\n' +
        '\n' +
        '### 3. Структура страницы\n' +
        '- Грамотное использование HTML и CSS: Стили могут помочь создать более понятную структуру страницы. Например, использование списков, заголовков и других семантических элементов помогает поисковым системам лучше индексировать контент.\n' +
        '- Классные селекторы: Правильное применение классов и идентификаторов может позволить вам легко управлять контентом и выделять важные элементы, которые могут быть полезны для SEO.\n' +
        '\n' +
        '### 4. Индексация\n' +
        '- Скрытый контент: Некоторые стили могут использоваться для скрытия контента (например, display: none). Если поисковые системы найдут такой скрытый контент, это может негативно сказаться на вашем SEO, особенно если они сочтут это попыткой манипуляции.\n' +
        '- Кроссбраузерная совместимость: Хорошо стилизованный сайт, который выглядит и работает одинаково хорошо во всех браузерах, повышает вероятности, что пользователи не будут сталкиваться с проблемами, которые могли бы уменьшить их доверие к сайту.',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Что такое препроцессор? Приведите примеры препроцессоров.',
      response:
        'Препроцессор — это инструмент, который предварительно обрабатывает исходный код, написанный на одном языке, переводя его в другой язык или в простой машинный код. Препроцессоры часто используются в веб-разработке для улучшения структуры, читаемости и удобства работы с кодом. Они позволяют применять различные функциональные возможности, такие как переменные, вложенные правила, функции и миксины, что делает написание и сопровождение кода более эффективным.\n' +
        '\n' +
        'Вот примеры самых распространенных типов препроцессоров:\n' +
        '\n' +
        '### 1. CSS-препроцессоры\n' +
        '- Sass (Syntactically Awesome Style Sheets):\n' +
        '- Sass добавляет в CSS такие возможности, как переменные, вложенность, миксины, функции и другие.' +
        '- LESS:\n' +
        '- LESS также поддерживает такие возможности, как переменные, вложенность, операции и логические условные конструкции.' +
        '- Stylus:\n' +
        '- Stylus — это гибкий и мощный CSS-препроцессор, который сильно отличается от обычного CSS, позволяя писать менее явный код.',
      active: false,
    },
    {
      level: 'Middle',
      title: 'Миксины в less',
      response:
        'Миксины в Less — это один из ключевых инструментов, который позволяет повторно использовать группы стилей в вашем CSS-коде. Они более удобны, чем простые классы, так как позволяют инкапсулировать стиль и применять его к различным элементам. Это особенно полезно при создании сложных стилей, которые могут применяться к нескольким селекторам или в разных контекстах.\n' +
        '\n' +
        '### Основные характеристики миксинов в Less:\n' +
        '\n' +
        '1. Определение миксина: Миксин определяется с помощью специального синтаксиса, используя имя миксина, за которым следует перечень свойств.\n' +
        '2. Параметры: Миксины могут принимать параметры, что позволяет делать их более гибкими и адаптируемыми к различным условиям.\n' +
        '3. Наслечение: Миксины могут наследовать другие миксины, что способствует уменьшению дублирования кода.',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Амперсанд (&) в less',
      response:
        'В Less символ амперсанда (&) используется для обозначения родительского селектора в контексте вложенных стилей. Это позволяет создавать более структурированные и организованные правила CSS, избегая дублирования кода и делая его более читабельным. Рассмотрим подробнее, как и где можно использовать амперсанд в Less.\n' +
        '\n' +
        '### Основные применения амперсанда (&) в Less\n' +
        '\n' +
        '1. Вложенные селекторы:\n' +
        'Амперсанд позволяет обращаться к родительскому селектору внутри вложенных правил. Это особенно полезно при создании комбинаций классов или когда нужно изменить свойства в зависимости от состояния элемента.' +
        '2. Использование с псевдоклассами и псевдоэлементами:\n' +
        'Вы можете использовать амперсанд, чтобы добавить псевдоклассы или псевдоэлементы к текущему селектору' +
        '3. Комбинированные селекторы:\n' +
        'Используя амперсанд, вы можете создать более сложные селекторы без дублирования кода.' +
        '4. Миксины с амперсантом:\n' +
        'Амперсанд также можно использовать внутри миксинов, что позволяет использовать родительский селектор в различных контекстах.',
      active: false,
    },
    {
      level: 'Senior',
      title:
        'Что такое постпроцессор? Как пост-процессор работает «под капотом»?',
      response:
        'Постпроцессор — это инструмент, который работает с уже скомпилированным CSS-кодом, добавляя дополнительные преобразования и оптимизации. В отличие от препроцессора, который модифицирует исходный код на этапе его написания и компиляции (например, Sass, Less, Stylus), постпроцессор обрабатывает уже готовый CSS-файл, выполняя различные задачи, такие как оптимизация, добавление вендорных префиксов, минификация и другие преобразования.\n' +
        '\n' +
        '### Примеры популярных постпроцессоров\n' +
        '\n' +
        '1. PostCSS — это самый распространенный инструмент для постобработки CSS. Он предоставляет API для создания плагинов, что позволяет добавлять функциональность.\n' +
        '2. Autoprefixer — это плагин для PostCSS, который автоматически добавляет вендорные префиксы к CSS-свойствам, чтобы обеспечить кросс-браузерную совместимость.\n' +
        '3. CSSNano — постпроцессор, который минифицирует CSS для уменьшения размера файлов и увеличения скорости загрузки.\n' +
        '\n' +
        '### Как постпроцессор работает «под капотом»?\n' +
        '\n' +
        '1. Чтение исходного CSS: Постпроцессор сначала считывает уже скомпилированный CSS-файл, который необходимо обработать.\n' +
        '\n' +
        '2. Парсинг: Код CSS разбивается на абстрактное синтаксическое дерево (AST, Abstract Syntax Tree). AST — это структура данных, представляющая иерархические отношения между элементами CSS.\n' +
        '\n' +
        '3. Обработка через плагины: Постпроцессоры часто используют плагины для выполнения различных преобразований. Например:\n' +
        '- Вендорные префиксы: Проверка свойств на необходимость добавления префиксов с помощью формул, определяющих, для каких браузеров и версий это требуется.\n' +
        '- Минификация: Удаление пробелов, комментариев и сокращение длинных свойств для уменьшения размера файла.\n' +
        '\n' +
        '4. Генерация итогового CSS: После применения всех заданных преобразований, постпроцессор формирует окончательный CSS-код, который затем может быть записан в файл или использован в браузере.',
      active: false,
    },
    {
      level: 'Middle',
      title: 'Расскажите как работает z-index? Если z-index не задан?',
      response:
        'z-index — это CSS-свойство, которое контролирует порядок наложения элементов в трехмерном пространстве веб-страницы. Оно определяет, какой элемент будет располагаться "над" или "под" другим элементом, когда они накладываются друг на друга. Чтобы правильно понять, как работает z-index, нужно учитывать несколько вещей.\n' +
        '\n' +
        '### Основные понятия\n' +
        '\n' +
        '1. Контекст наложения:\n' +
        '- z-index работает только в пределах контекста наложения. Контекст наложения создается для элементов, имеющих определенные свойства position (например, relative, absolute, fixed или sticky) и с заданным значением z-index.\n' +
        '- Каждый элемент с position и определенным z-index образует собственный контекст наложения для его потомков.\n' +
        '\n' +
        '2. Значения z-index:\n' +
        '- z-index принимает целые числа, включая отрицательные значения. Больше значение z-index означает, что элемент будет находиться выше (ближе к зрителю) по сравнению с элементами с меньшими значениями z-index.\n' +
        '- Например, если у вас есть три элемента с z-index: 1, z-index: 2, и z-index: 3, элемент с z-index: 3 будет находиться выше остальных.\n' +
        '\n' +
        '3. Автоматическое поведение:\n' +
        '- Если z-index не задан, элементы располагаются на основание порядка их размещения в HTML-документе. Элементы, которые расположены в документе позже, будут отображаться выше тех, которые расположены раньше. Например, если у вас есть два перекрывающихся элемента, и ни один из них не имеет установленных z-index, тот, который написан после другого в HTML, будет виден сверху.' +
        'Заданный z-index:\n' +
        '- Элементы с установленными значениями z-index и соответствующими позициями могут перекрывать другие элементы.' +
        '- Не заданный z-index:\n' +
        '- Если у элемента не установлен z-index, но он имеет position, он будет принимать значение z-index: auto по умолчанию. При этом он будет помещён в порядок наложения в соответствии с его положением в документе и контекстом наложения.\n',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Зачем нужны mediaQueries?',
      response:
        'Media queries (медиа-запросы) — это важный инструмент в CSS, предназначенный для создания адаптивных и отзывчивых веб-дизайнов. Они позволяют изменять стиль веб-страницы в зависимости от различных характеристик устройства, на котором она отображается. Вот основные причины, зачем нужны media queries:\n' +
        '\n' +
        '### 1. Адаптивный дизайн\n' +
        '\n' +
        'Медиа-запросы позволяют разработчикам создавать адаптивные макеты, которые могут автоматически изменять свое отображение в зависимости от размера экрана устройства. Это помогает обеспечить удобство использования на мобильных устройствах, планшетах и настольных компьютерах.\n' +
        '\n' +
        '### 2. Оптимизация пользовательского опыта\n' +
        '\n' +
        'С помощью медиа-запросов можно изменять элементы интерфейса, такие как размеры шрифтов, отступы, расположение изображений и многое другое, чтобы улучшить пользовательский опыт в зависимости от устройства. Например, на мобильных устройствах можно сделать текст более крупным и уменьшить количество столбцов в сетке.\n' +
        '\n' +
        '### 3. Перегрузка контента\n' +
        '\n' +
        'Медиа-запросы позволяют включать или отключать определенные стили, изображения и другие элементы в зависимости от размера экрана или других параметров устройства. Например, можно загружать менее тяжелые изображения для мобильных устройств, чтобы сократить время загрузки.\n' +
        '\n' +
        '### 4. Контроль за производительностью\n' +
        '\n' +
        'Используя медиа-запросы, разработчики могут оптимизировать производительность сайта, загружая только нужные стили и контент в зависимости от устройства. Это особенно важно для мобильных пользователей с ограниченным доступом к данным.\n' +
        '\n' +
        '### 5. Поддержка различных разрешений и ориентаций\n' +
        '\n' +
        'Медиа-запросы позволяют адаптировать дизайн в зависимости от разрешения экрана и ориентации устройства (портретная или альбомная). Это особенно актуально для планшетов и смартфонов, которые могут работать в разных режимах.',
      active: false,
    },
    {
      level: 'Senior',
      title: 'Чем отличается {display: none} от {visibility: hidden}',
      response:
        'Свойства CSS {display: none} и {visibility: hidden} часто используются для управления видимостью элементов на веб-странице, но они имеют разные эффекты на элементы и их поведение в документе. Вот основные различия между ними:\n' +
        '\n' +
        '### 1. Отображение элемента\n' +
        '\n' +
        '- {display: none}:\n' +
        '- Убирает элемент из потока документа. Элемент не будет отображаться на странице, и он не будет занимать место. Это означает, что соседние элементы могут занять место, которое было освобождено.' +
        '- {visibility: hidden}:\n' +
        '- Скрывает элемент, но элемент по-прежнему занимает место в потоке документа. То есть, пространство, которое он занимал, остается, но содержимое не отображается.' +
        '2. События\n' +
        '\n' +
        '- {display: none}:\n' +
        '- Элементы с этим стилем не участвуют в обработке событий. Например, на них не срабатывают клики или другие события мыши.\n' +
        '\n' +
        '- {visibility: hidden}:\n' +
        '- Скрытые элементы по-прежнему могут обрабатывать события (например, на них можно назначить обработчики), но поскольку они невидимы, пользователи не могут с ними взаимодействовать.\n' +
        '\n' +
        '### 3. Использование в анимации\n' +
        '\n' +
        '- Элементы с {visibility: hidden} могут использоваться в анимациях, так как они по-прежнему существуют в DOM-дереве.\n' +
        '- Элементы с {display: none} не могут участвовать в анимации, поскольку они полностью убираются из DOM.\n' +
        '\n' +
        '### 4. Примеры использования\n' +
        '\n' +
        '- {display: none} подходит для случаев, когда необходимо полностью удалить элемент с экрана, например, скрытие модальных окон или переключение между вкладками.\n' +
        '\n' +
        '- {visibility: hidden} может быть использовано, например, для временного скрытия элементов интерфейса (таких как подсказки), где важно сохранить место в компоновке страницы.' +
        'Когда вы выбираете между {display: none} и {visibility: hidden}, определите, требуется ли вам сохранить место для элемента в потоковой компоновке. Если элемент не должен занимать место — используйте {display: none}. Если нужно скрыть его, но сохранить место — используйте {visibility: hidden}.',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Что такое свойство Position',
      response:
        'Свойство position в CSS определяет, как элемент будет позиционирован на странице, а также взаимодействие с другими элементами в документе. Оно играет важную роль в компоновке веб-страниц. Значения свойства position определяют контекст позиционирования для элемента.',
      active: false,
    },
    {
      level: 'Middle',
      title: 'Назовите возможные свойства position',
      response:
        '1. static\n' +
        '- Это значение по умолчанию для всех элементов. Элементы с position: static располагаются в естественном потоке документа. Позиционирование не зависит от других элементов.\n' +
        '- Свойства top, right, bottom, и left для таких элементов игнорируются.\n' +
        '\n' +
        '### 2. relative\n' +
        '- Элемент позиционируется относительно своего нормального положения в потоке документа.\n' +
        '- Если задать свойства top, right, bottom, или left, элемент будет смещен от его первоначального положения, но при этом займет свое обычное место в потоке, и другие элементы будут вести себя так, будто он находится в своём исходном месте.' +
        '3.. absolute\n' +
        '- Элемент позиционируется относительно ближайшего предка с ненормальным (то есть не static) позиционированием.\n' +
        '- Если таких предков нет, элемент будет позиционироваться относительно окна обозревателя (viewport).\n' +
        '- При использовании position: absolute элемент вынимается из потока документа, то есть не занимает места, и другие элементы будут располагаться так, как будто его нет.' +
        '4. fixed\n' +
        '- Элемент фиксирован в отношении окна браузера, а не потока документа. Это означает, что он останется на одном и том же месте экрана при прокрутке страницы.\n' +
        '- Также вынимается из потока документа, как и элемент с position: absolute.' +
        '5. sticky\n' +
        '- Элемент ведёт себя как relative, пока не достигнет определённой позиции прокрутки, после чего ведет себя как fixed.\n' +
        '- Это означает, что элемент будет оставаться в своем нормальном положении до тех пор, пока его верхняя граница не достигнет верхней части viewport, после чего он будет оставаться на месте при дальнейшей прокрутке.',
      active: false,
    },
    {
      level: 'Junior',
      title:
        'Объясните, что такое Flexbox и как он упрощает работу с расположением элементов на странице',
      response:
        ' Flexbox (Flexible Box Layout) — это модель компоновки CSS, предназначенная для ' +
        'более эффективного распределения пространства и выравнивания элементов в контейнерах, даже' +
        ' когда их размер неизвестен или динамически меняется. Flexbox предоставляет гибкий и интуитивно' +
        ' понятный способ управления расположением элементов, что значительно упрощает создание адаптивных и отзывчивых дизайнов.\n' +
        '\n' +
        '### Основные характеристики Flexbox:\n' +
        '\n' +
        '1. Гибкость: Flexbox позволяет элементам внутри контейнера изменять свои размеры и порядок' +
        ' в зависимости от доступного пространства, что обеспечивает гибкость макета.\n' +
        '\n' +
        '2. Выравнивание: Flexbox облегчает выравнивание элементов по горизонтали и вертикали, позволяя' +
        ' разработчикам быстро выравнивать элементы по центру, краям или между собой.\n' +
        '\n' +
        '3. Перенос элементов: Элементы могут быть легко перенесены на новую строку или в колонку, что' +
        ' полезно для адаптивных макетов.\n' +
        '\n' +
        '4. Простота управления: Flexbox делает управление пространством между элементами более понятным и простым.' +
        ' Можно задать отступы и размеры, которые автоматически адаптируются.\n' +
        '\n' +
        '### Основные компоненты Flexbox:\n' +
        '\n' +
        '1. Контейнер Flexbox: Элемент, к которому применяются свойства Flexbox. Это родительский элемент,' +
        ' содержащий дочерние элементы (flex items).\n' +
        '\n' +
        '2. Элементы Flexbox: Дочерние элементы контейнера, которые будут управляться с помощью Flexbox.\n' +
        '\n' +
        '### Основные свойства Flexbox:\n' +
        '\n' +
        '#### CSS-свойства для контейнера:\n' +
        '\n' +
        '- display: flex;: Применяет модель Flexbox к элементу.\n' +
        '\n' +
        '- flex-direction: Определяет направление расположения элементов (по умолчанию — row).\n' +
        '- Примеры:\n' +
        '- row — элементы располагаются по горизонтали.\n' +
        '- column — элементы располагаются по вертикали.\n' +
        '\n' +
        '- justify-content: Устанавливает выравнивание элементов по главной оси.\n' +
        '- Примеры:\n' +
        '- flex-start — выравнивание по началу.\n' +
        '- flex-end — выравнивание по концу.\n' +
        '- center — центрирование.\n' +
        '- space-between — равномерное распределение с отступами между элементами.\n' +
        '- space-around — равномерное распределение с отступами вокруг элементов.\n' +
        '\n' +
        '- align-items: Устанавливает выравнивание по поперечной оси.\n' +
        '- Примеры:\n' +
        '- flex-start — выравнивание по верхнему краю.\n' +
        '- flex-end — выравнивание по нижнему краю.\n' +
        '- center — вертикальное центрирование.\n' +
        '- stretch — растяжение элементов на весь доступный размер.\n' +
        '\n' +
        '#### CSS-свойства для элементов:\n' +
        '\n' +
        '- flex-grow: Определяет, как элемент может расти, чтобы заполнить доступное пространство.\n' +
        '\n' +
        '- flex-shrink: Определяет, как элемент может сжиматься, чтобы избежать переполнения контейнера.\n' +
        '\n' +
        '- flex-basis: Устанавливает начальный размер элемента перед распределением пространства.',
      active: false,
    },
    {
      level: 'Middle',
      title:
        'В чем разница между display: block, display: inline, и display: inline-block?',
      response:
        '- display: block: Элемент занимает всю ширину, начинается с новой строки, подходит для заголовков,' +
        ' абзацев и других блочных элементов.\n' +
        '- display: inline: Элемент занимает только необходимую ширину, не начинается с новой строки, подходит для' +
        ' текста и других элементов, где не требуется контроль высоты.\n' +
        '- display: inline-block: Элемент располагается рядом с другими элементами, не начиная новую строку,' +
        ' но может иметь заданную ширину и высоту, что делает его полезным для создания адаптивных интерфейсов.',
      active: false,
    },
    {
      level: 'Junior',
      title:
        'Как работают трансформации (transform) и трансляции (transition) в CSS3? Приведите примеры использования.\n',
      response:
        'В CSS3 трансформации и трансляции — это два мощных инструмента, ' +
        'которые позволяют изменять положение, размер, угол и другие свойства элементов на веб-странице ' +
        'с помощью эффектов анимации и визуальных преобразований.\n' +
        '\n' +
        '1. Трансформации (transform)\n' +
        '\n' +
        'Свойство transform позволяет изменять 2D и 3D представления элементов.' +
        ' Оно может использоваться для таких преобразований, как:\n' +
        '\n' +
        '- Поворот (rotate)\n' +
        '- Масштабирование (scale)\n' +
        '- Перемещение (translate)\n' +
        '- Наклон (skew)' +
        '2. Трансляции (transition)\n' +
        '\n' +
        'Свойство transition обеспечивает плавный переход между состояниями CSS. ' +
        'Оно позволяет контролировать изменение других CSS-свойств со временем (например, цвет, размер, положение или трансформацию).\n' +
        '\n' +
        'Вы можете указать время перехода, тип временной функции (ease, linear, ease-in и т. д.)' +
        ' и свойства, к которым применяется переход.',
      active: false,
    },
    {
      level: 'Middle',
      title:
        'Что такое градиенты в CSS3 и как их можно использовать? Приведите пример градиента.',
      response:
        'Градиенты в CSS3 — это плавные переходы между двумя или более цветами, которые могут' +
        ' использоваться в качестве фонов, заливок и других визуальных эффектов в веб-дизайне.' +
        ' Градиенты позволяют создавать красивые и современные эффекты, добавляя глубину и стиль' +
        ' на страницы без необходимости использования изображений.\n' +
        '\n' +
        '### Типы градиентов в CSS:\n' +
        '\n' +
        '1. Линейные градиенты (linear-gradient):\n' +
        'Линейный градиент плавно переходит между цветами в заданном направлении,' +
        ' которое можно определить с помощью угла или ключевых слов (например, to right, to bottom и т. д.).\n' +
        '\n' +
        '2. Радиальные градиенты (radial-gradient):\n' +
        'Радиальный градиент создаёт эффект перехода от центра к внешним краям в виде круга или эллипса.' +
        'Линейные градиенты:- direction: направление градиента (например, to right, to bottom, или угол в градусах).\n' +
        '- color-stop: цветовые точки, которые определяют цвета градиента.' +
        'Радиальные градиенты:- shape: форма градиента (например, circle или ellipse).\n' +
        '- size: размер градиента (например, farthest-corner или closest-side).\n' +
        '- position: положение градиента (например, center).\n' +
        '- color-stop: цветовые точки.\n',
      active: false,
    },
    {
      level: 'Junior',
      title:
        'Как использовать псевдоэлементы и псевдоклассы в CSS3? Приведите примеры',
      response:
        ' Псевдоэлементы и псевдоклассы в CSS3 — это мощные инструменты, которые ' +
        'позволяют нацеливаться на определённые части элементов или состояния' +
        ' элементов без изменения HTML-код. Это особенно полезно для создания стилизованных' +
        ' интерфейсов и улучшения внешнего вида страниц.\n' +
        '\n' +
        '### Псевдоэлементы\n' +
        '\n' +
        'Псевдоэлементы позволяют стилизовать определённые части элемента. В CSS3 существуют следующие псевдоэлементы:\n' +
        '\n' +
        '- ::before — добавляет содержимое перед содержимым элемента.\n' +
        '- ::after — добавляет содержимое после содержимого элемента.\n' +
        '- ::first-line — стилизует первую строку текста элемента.\n' +
        '- ::first-letter — стилизует первую букву текста.' +
        'Псевдоклассы\n' +
        '\n' +
        'Псевдоклассы применяются к элементам на основе их состояния или положения в документе.' +
        ' Вот несколько распространённых псевдоклассов:\n' +
        '\n' +
        '- :hover — применяется, когда курсор находится над элементом.\n' +
        '- :focus — применяется, когда элемент имеет фокус (например, поле ввода).\n' +
        '- :nth-child(n) — выбирает элементы по их порядковому номеру.\n' +
        '- :first-child — применяет стиль к первому дочернему элементу.\n' +
        '- :last-child — применяет стиль к последнему дочернему элементу.',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Что такое свойства box-shadow и text-shadow и как они работают?',
      response:
        'Свойства box-shadow и text-shadow в CSS используются для создания теней вокруг' +
        ' объектов и текста соответственно. Эти свойства помогают добавить глубину и объем на веб-страницы,' +
        ' улучшая визуальное восприятие элементов.\n' +
        '\n' +
        '### 1. Свойство box-shadow\n' +
        '\n' +
        'Свойство box-shadow добавляет тень к элементам блоков . Оно определяет, как будет выглядеть тень, и имеет следующий синтаксис:\n' +
        '\n' +
        '\n' +
        '(box-shadow: h-offset v-offset blur-radius spread-radius color;)\n' +
        '\n' +
        '\n' +
        '- h-offset: Горизонтальное смещение тени (положительное значение смещает в право, отрицательное — влево).\n' +
        '- v-offset: Вертикальное смещение тени (положительное значение смещает вниз, отрицательное — вверх).\n' +
        '- blur-radius: Радиус размытия тени (чем больше значение, тем более размытой будет тень).\n' +
        '- spread-radius: Радиус распространения тени (положительное значение увеличивает размер тени, отрицательное — уменьшает).\n' +
        '- color: Цвет тени (возможно использование любых форматов цвета, например, HEX, RGB, RGBA и т.д.).' +
        'Свойство text-shadow\n' +
        '\n' +
        'Свойство text-shadow используется для добавления теней к тексту. Синтаксис следующий:\n' +
        '\n' +
        '\n' +
        'text-shadow: h-offset v-offset blur-radius color;\n' +
        '\n' +
        '\n' +
        '- h-offset: Горизонтальное смещение тени (как и для box-shadow).\n' +
        '- v-offset: Вертикальное смещение тени (как и для box-shadow).\n' +
        '- blur-radius: Радиус размытия тени (помимо этого, увеличивает глубину).\n' +
        '- color: Цвет тени.',
      active: false,
    },
    {
      level: 'Junior',
      title:
        'Объясните, как делать анимации с помощью CSS3. Каковы различные ключевые кадры (keyframes)?',
      response:
        'Анимации в CSS3 позволяют создавать плавные переходы между состояниями элементов на веб-странице, ' +
        'добавляя динамическое взаимодействие и визуальный интерес.' +
        ' Для создания анимаций в CSS3 используется свойство animation и ключевые кадры (keyframes), которые определяют,' +
        ' как элемент будет выглядеть в разные моменты времени.\n' +
        '\n' +
        '### Синтаксис анимации\n' +
        '\n' +
        'Чтобы создать анимацию, вам нужно выполнить следующие основные шаги:\n' +
        '\n' +
        '1. Определить ключевые кадры с помощью правила @keyframes.\n' +
        '2. Применить анимацию к элементу с помощью свойства animation.\n' +
        '\n' +
        '### 1. Определение ключевых кадров\n' +
        '\n' +
        'Правило @keyframes позволяет задать анимацию, описывая, как элемент ' +
        'должен выглядеть на разных этапах анимации. Репрезентация анимации может включать множество' +
        ' ключевых кадров, но обычно используются два основных состояния: начальное (0%) и конечное (100%).' +
        'Применение анимации\n' +
        '\n' +
        'Чтобы использовать определённые ключевые кадры, необходимо применить их к элементу с помощью свойства animation.' +
        'Свойство animation\n' +
        '\n' +
        'Свойство animation может включать различные параметры:\n' +
        '\n' +
        '- animation-name: имя анимации (например, example)\n' +
        '- animation-duration: длительность анимации (например, 4s или 2s)\n' +
        '- animation-timing-function: функция временной анимации (например, linear, ease, ease-in, ease-out)\n' +
        '- animation-delay: время задержки перед началом анимации\n' +
        '- animation-iteration-count: количество повторений анимации (например, infinite или 3)\n' +
        '- animation-direction: направление анимации (например, normal, reverse, alternate, alternate-reverse)\n' +
        '- animation-fill-mode: определяет, как будет выглядеть элемент после окончания анимации (например, forwards, backwards)',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Что такое CSS-препроцессоры и почему они были созданы?',
      response:
        'CSS-препроцессоры — это инструменты, которые расширяют возможности стандартного CSS,' +
        ' добавляя дополнительные функции ' +
        'и улучшая структуру стилей. Они предназначены для упрощения процесса написания и управления ' +
        'стилями в крупных проектах. К популярным CSS-препроцессорам относятся SASS (Syntactically Awesome Style Sheets),' +
        ' LESS и Stylus.\n' +
        '\n' +
        '### Основные причины возникновения CSS-препроцессоров:\n' +
        '\n' +
        '1. Улучшение структуры кода:\n' +
        'Препроцессоры позволяют использовать вложенные правила, что делает код более читаемым и понятным.' +
        ' Это позволяет легко организовывать и управлять стилями, особенно в крупных проектах с иерархическими структурами.' +
        '2. Повторно используемые стили:\n' +
        'Препроцессоры поддерживают использование переменных, миксинов и функций, что позволяет избежать дублирования кода' +
        ' и легко обновлять стили в рамках проекта.' +
        '3.Модулярность:\n' +
        '   Многие препроцессоры поддерживают возможность разбивки стилей на отдельные, более мелкие файлы, которые затем можно' +
        ' импортировать в основной файл. Это помогает организовать проект и улучшает управляемость кода.' +
        '4.Расширенные функции и инструменты: Препроцессоры предлагают дополнительные функции, такие как математические операции,' +
        ' условные конструкции и циклы. Это позволяет создавать более динамичные и сложные стили.' +
        '5. Упрощение управления стилями:\n' +
        'Благодаря использованию функций, переменных и других функций, управление стилями становится более гибким и простым. ' +
        'Это особенно полезно в крупных проектах, где необходимо быстро вносить изменения.\n\n',
      active: false,
    },
    {
      level: 'Junior',
      title: 'Объясните основные преимущества использования SASS в проекте.',
      response:
        'SASS (Syntactically Awesome Style Sheets) — это один из самых популярных CSS-препроцессоров, который добавляет' +
        ' множество возможностей для написания стилей. Вот основные преимущества использования SASS в проектах:\n' +
        '\n' +
        ' 1. Вложенность\n' +
        'SASS поддерживает вложенные правила, что позволяет организовать стили в логической иерархии,' +
        ' отражающей структуру HTML. Это делает код более читабельным и упрощает его поддержку.' +
        '2. Переменные\n' +
        'SASS позволяет использовать переменные, что упрощает управление значениями, такими как цвета, размеры шрифтов' +
        ' и другие параметры.' +
        ' Это также позволяет избежать дублирования кода.' +
        '3. Миксины\n' +
        'Миксины (mixins) позволяют создавать наборы стилей, которые можно повторно использовать по всему проекту,' +
        ' передавая им переменные.' +
        ' Это особенно удобно для стилизации повторяющихся элементов или условий.' +
        '4. Функции\n' +
        'SASS предоставляет встроенные функции для выполнения вычислений и манипуляций со значениями, а также возможность ' +
        'создавать свои собственные функции.' +
        ' Это упрощает создание сложных стилей и взаимодействие с математикой.' +
        '5. Парциальные файлы и импорты\n' +
        'SASS позволяет разбивать стили на парциальные файлы, которые можно импортировать в основной файл.' +
        ' Это делает структуру проекта более организованной и облегчает управление стилями.' +
        '6. Расширяемость (Extend)\n' +
        'С помощью директивы @extend можно делиться стилями между классами, что позволяет ' +
        'избежать дублирования кода и упрощает обновление стилей.' +
        '7. Сложные селекторы\n' +
        'SASS позволяет использовать сложные селекторы с логическими условиями и операциями, что делает код более выразительным.\n' +
        '\n' +
        '8. Временные функции\n' +
        'С помощью временных функций можно создавать анимации и переходы с динамическими значениями,' +
        ' что упрощает их написание и чтение.\n' +
        '\n' +
        '9. Улучшенная читаемость\n' +
        'SASS упрощает написание кода и делает его более понятным, что особенно важно для ' +
        'командной работы и поддержки проектов.',
      active: false,
    },
    {
      level: 'Middle',
      title: ' Каковы основные синтаксические отличия между SASS и LESS?',
      response:
        'SASS и LESS — это два популярных CSS-препроцессора, и хотя они оба предназначены для расширения возможностей CSS,' +
        ' они имеют различные синтаксические особенности. Давайте рассмотрим основные синтаксические отличия между SASS и LESS:\n' +
        '\n' +
        ' 1. Синтаксис\n' +
        '- SASS:\n' +
        'SASS использует отступы вместо фигурных скобок и точек с запятой для определения блоков кода. ' +
        'Это работает как синтаксис, основанный на отступах, что делает код более чистым и читабельным.' +
        '- LESS:\n' +
        'LESS требует фигурные скобки и точки с запятой для определения блоков и завершения строк,' +
        ' что делает его ближе к привычному синтаксису CSS.' +
        '2. Переменные ' +
        '- Объявление переменной: В SASS переменные обозначаются с помощью знака доллара ' +
        '- LESS: Переменные обозначаются с помощью' +
        '3. Миксины в SASS\n' +
        '\n' +
        '3.1. Объявление миксина: В SASS миксины объявляются с помощью директивы @mixin, за которой следует имя миксина' +
        ' и его параметры (если они есть).\n' +
        '\n' +
        '- Использование миксина: Для применения миксина в селекторе используется директива @include.' +
        '3.2. Миксины в LESS\n' +
        '\n' +
        '- Объявление миксина: В LESS создается миксин через класс или с помощью функции, и для определения параметров используются символы @.\n' +
        '\n' +
        '- Использование миксина: Миксин вызывается простым обращением к его имени, за которым следуют переданные параметры в круглых скобках.\n' +
        '3.3. Основные отличия между SASS и LESS\n' +
        '\n' +
        '- Синтаксис:\n' +
        '- В SASS используется директива @mixin для объявления и @include для использования. Это выглядит несколько более формально.\n' +
        '- В LESS миксины объявляются как функции и применяются просто как класс: мы вызываем имя миксина как из класса.\n' +
        '\n' +
        '- Вложенность:\n' +
        '- В SASS можно вызывать миксины внутри других миксинов, и это можно делать на любом уровне вложенности.\n' +
        '- В LESS тоже поддерживается вложенность, но как в функциях с параметрами, так и в точности, как в обычных классах.\n' +
        '\n' +
        '- Поддержка параметров:\n' +
        '- Оба препроцессора поддерживают параметры для миксинов, однако в SASS можно задавать параметры по ' +
        'умолчанию и использовать @content для передачи дополнительных стилей.' +
        '4. Наблюдение за изменениями и вложенными правилами\n' +
        '- Оба препроцессора поддерживают вложенные правила, но SASS имеет более развитую функциональность благодаря директиве @extend,' +
        ' которая позволяет делиться стилями между классами, избегая дублирования.',
      active: false,
    },
    {
      level: 'Senior',
      title:
        '  Объясните концепцию переменных в SASS и LESS. Приведите пример.',
      response:
        'Концепция переменных в SASS и LESS заключается в возможности хранения значений,' +
        ' таких как цвета, размеры шрифтов или любые другие значения, которые могут быть использованы' +
        ' многократно в стилях. Это улучшает управляемость,' +
        ' читабельность и поддержку кода, так как позволяет вносить изменения в единое место, а не искать каждое вхождение в коде.' +
        '- Гибкость: Оба препроцессора позволяют использовать переменные в любом месте, где ожидается значение,' +
        ' однако SASS предлагает дополнительные возможности,' +
        ' такие как ссылки на переменные в миксинах и использование переменных как параметров с заданием значений по умолчанию.',
      active: false,
    },
    {
      level: 'Junior',
      title:
        'Что такое вложенность правил (nesting), и как она работает в препроцессорах?',
      response:
        '' +
        'Вложенность правил (nesting) — это концепция, которая позволяет разработчикам писать ' +
        'CSS-правила внутри других CSS-правил, создавая структурированное и иерархическое представление стилей.' +
        ' Эта возможность значительно улучшает читаемость и организацию кода, позволяя легче видеть, как стили' +
        ' группируются и применяются к различным элементам страницы.\n' +
        '\n' +
        '### Как работает вложенность в SASS и LESS\n' +
        '\n' +
        '#### Вложенность в SASS\n' +
        '\n' +
        'В SASS вложенность реализуется путем написания селекторов внутри других селекторов. ' +
        'Это делает код более логичным и удобным для восприятия. Вложенность в LESS\n' +
        '\n' +
        'В LESS вложенность работает аналогично. Вы можете писать селекторы внутри других ' +
        'селекторов, что также делает структуру кода более понятной' +
        ' Основные преимущества вложенности\n' +
        '\n' +
        '1. Упрощенная структура: Позволяет быстрее находить и редактировать связанные стили,' +
        ' поскольку визуально они находятся рядом друг с другом.\n' +
        '\n' +
        '2. Лучшая читабельность: Код становится более понятным и структурированным, что упрощает' +
        ' работу с большими стилевыми файлами.\n' +
        '\n' +
        '3. Избежание дублирования: Вложенные правила позволяют избежать повторного написания общего селектора,' +
        ' сохраняя стильный код чистым и организованным.',
      active: false,
    },
    {
      level: 'Middle',
      title:
        ' Как работают миксины (mixins) в SASS и LESS, и для чего они используются?',
      response:
        'Миксины (mixins) — это одна из ключевых функций препроцессоров CSS, таких как SASS и LESS, которые позволяют ' +
        'разработчикам создавать повторно используемые группы CSS-правил. Миксины помогают избегать дублирования' +
        ' кода, улучшая поддержку и организацию стилей. Давайте подробно рассмотрим, как работают миксины в SASS ' +
        'и LESS, а также их использование и преимущества.\n' +
        '\n' +
        '### 1. Миксины в SASS\n' +
        '\n' +
        'Объявление миксина:\n' +
        'В SASS миксин создается с помощью директивы @mixin, за которой следует имя миксина ' +
        'и его параметры (при необходимости).\n' +
        '\n' +
        'Использование миксина:\n' +
        'Для применения миксина в стиле используется директива @include.' +
        'Как работают миксины в LESS: Объявление миксина:\n' +
        '\n' +
        'Миксин объявляется с помощью имени с параметрами (при необходимости) и фигурных ' +
        'скобок, в которых содержатся стили. Параметры могут быть опциональными и могут иметь значения по умолчанию.' +
        'Использование миксина:\n' +
        '\n' +
        'Чтобы использовать миксин в другом селекторе, просто вызовите его имя как функцию,' +
        ' передав необходимые параметры в круглых скобках.',
      active: false,
    },
    {
      level: 'Middle',
      title:
        '   Что такое функции и операции в SASS? Приведите примеры их использования.',
      response:
        'Функции и операции в SASS являются мощными инструментами для выполнения вычислений и манипуляций с данными,' +
        ' что позволяет создавать более динамичные и гибкие стили' +
        '. Давайте подробнее рассмотрим каждую из этих концепций и приведем примеры их использования.\n' +
        '\n' +
        '### 1. Функции в SASS\n' +
        '\n' +
        'Функции в SASS позволяют выполнять определенные манипуляции с данными и возвращать результат. ' +
        'SASS предоставляет множество встроенных функций для работы с цветами, математикой, строками и другими типами данных.' +
        ' Кроме того, разработчики могут создавать свои собственные функции.' +
        'Примеры встроенных функций:\n' +
        '\n' +
        '- lighten: осветляет цвет.\n' +
        '- darken: затемняет цвет.\n' +
        '- multiply: умножает два значения.\n' +
        '- round: округляет число.' +
        '2. Операции в SASS\n' +
        '\n' +
        'Операции в SASS позволяют выполнять математические вычисления с числами и длинами.' +
        ' Например, вы можете складывать, вычитать, умножать и делить значения, что упрощает создание' +
        ' адаптивных и динамических дизайнов.' +
        'Создание пользовательской функции\n' +
        '\n' +
        'Вы также можете создавать свои собственные функции в SASS для выполнения специфических задач. Для этого используется директива @function.\n' +
        '#### Примеры операций:\n' +
        '\n' +
        '- Сложение (+)\n' +
        '- Вычитание (-)\n' +
        '- Умножение (*)\n' +
        '- Деление (/)',
      active: false,
    },
    {
      level: 'Senior',
      title:
        '  Объясните, что такое "partials" в SASS и как их можно использовать для организации кода.',
      response:
        ' Partials в SASS — это специальные Sass-файлы, которые предназначены для хранения частей' +
        ' стилей, которые можно импортировать в другие файлы SASS. Это позволяет организовать CSS-код, ' +
        'делая его более структурированным и легким в обслуживании. Используя partials, вы можете разбить' +
        ' ваш CSS на меньшие, управляемые файлы и избежать дублирования кода.\n' +
        '\n' +
        '### Преимущества использования partials в SASS:\n' +
        '\n' +
        '1. Организация кода: Разделение стилей на логические блоки (например, для различных компонентов,' +
        ' страниц или секций), что упрощает навигацию и редактирование.\n' +
        '\n' +
        '2. Упрощение поддержки: Легче находить и менять стили, так как каждый файл отвечает за отдельный ' +
        'аспект или часть дизайна.\n' +
        '\n' +
        '3. Повторное использование: Вы можете импортировать одни и те же partials в нескольких файлах, что' +
        ' снижает дублирование кода.\n' +
        '\n' +
        '4. Лучшие рабочие практики: Меньшие файлы с ограниченным количеством кода легче тестировать, ' +
        'понимать и расширять.\n' +
        '\n' +
        '### Как использовать partials:\n' +
        '\n' +
        '1. Создание partials:\n' +
        'Назовите ваши partials с префиксом подчеркивания (_), чтобы обозначить, что это только часть ' +
        'стилей, а не полный файл CSS. Например, вы можете создать следующие файлы:\n' +
        '- _variables.scss (для хранения переменных)\n' +
        '- _mixins.scss (для хранения миксинов)\n' +
        '- _buttons.scss (для стилизации кнопок)\n' +
        '- _header.scss (для стилизации заголовка)\n' +
        '- _footer.scss (для стилизации подвала)\n' +
        '\n' +
        '2. Импорт partials:\n' +
        'Используя команду @import, вы можете подключить созданные partials в основном файле стилей.' +
        '\n' +
        '3. Сборка файла:\n' +
        'После компиляции SASS в ваш основной файл (например, main.css), все стили из импортированных файлов' +
        ' будут собраны и скомпилированы в один CSS-файл.' +
        'Использование partials в SASS позволяет организовать стили более структурированно и управляемо. ' +
        'Вы сможете легко поддерживать и развивать ваш проект, обращаясь к отдельным частям стилей, без излишнего' +
        ' дублирования кода. Разделение кода на partials соответствует принципам модульности и лучшим практикам разработки,' +
        ' что значительно улучшает процесс работы с CSS.',
      active: false,
    },
    {
      level: 'Senior',
      title:
        ' Как происходит компиляция файлов SASS или LESS в CSS? Какие инструменты вы можете использовать для этого?',
      response:
        'Компиляция файлов SASS или LESS в CSS — это процесс преобразования стилей,' +
        ' написанных с использованием этих препроцессоров, в стандартный CSS, который браузеры' +
        ' могут интерпретировать. Этот процесс необходим, поскольку браузеры не поддерживают SASS или LESS напрямую,' +
        ' так как это расширенные синтаксисы для написания CSS.\n' +
        '\n' +
        '### Как происходит компиляция\n' +
        '\n' +
        '1. Написание стилей: Вы создаете файлы с помощью SASS (с расширением .scss или .sass) или LESS (с расширением .less).\n' +
        '\n' +
        '2. Запуск компилятора: Используя специальный инструмент или командную строку, вы запускаете' +
        ' компилятор, который обрабатывает ваш SASS или LESS код.\n' +
        '\n' +
        '3. Обработка файла: Компилятор считывает ваш файл, анализирует его, выполняет все определенные' +
        ' функции, операции, миксины и partials, и затем генерирует итоговый CSS-файл.\n' +
        '\n' +
        '4. Вывод: Скомпилированный CSS-файл сохраняется на диск и может быть подключен к HTML-документу.\n' +
        '\n' +
        '\n' +
        '\n' +
        '### Инструменты для компиляции\n' +
        '\n' +
        'Существует несколько инструментов, которые можно использовать для компиляции SASS и LESS в CSS:\n' +
        '\n' +
        '#### 1. CLI-компиляторы\n' +
        '\n' +
        '- SASS CLI: Официальный компилятор для SASS можно установить через npm или использовать' +
        ' предварительно собранные бинарники.\n' +
        '\n' +
        '    npm install -g sass\n' +
        '    sass input.scss output.css\n' +
        '\n' +
        '- LESS CLI: Аналогичный подход можно использовать для LESS.\n' +
        '\n' +
        '    npm install -g less\n' +
        '    lessc input.less output.css\n' +
        '\n' +
        '\n' +
        '#### 2. Сборщики проектов\n' +
        '\n' +
        '- Webpack: С помощью плагинов, таких как sass-loader и less-loader, ' +
        'вы можете интегрировать SASS и LESS в сборку вашего проекта.\n' +
        '\n' +
        '    npm install sass-loader css-loader style-loader --save-dev\n' +
        '\n' +
        '- Gulp: Это задача для автоматизации, которая позволяет писать задачи' +
        ' для компиляции SASS и LESS. Плагины gulp-sass и gulp-less могут помочь в этом.\n' +
        '\n' +
        '    npm install gulp gulp-sass gulp-less --save-dev\n' +
        '\n' +
        '- Grunt: Используйте плагины grunt-sass и grunt-contrib-less для компиляции' +
        ' SASS и LESS.\n' +
        '\n' +
        '    npm install grunt-sass grunt-contrib-less --save-dev\n' +
        '\n' +
        '\n' +
        '#### 3. Расширения и плагины для редакторов\n' +
        '\n' +
        '- Visual Studio Code: Существуют расширения, такие как Live Sass Compiler ' +
        'и Easy LESS, которые позволяют компилировать файлы в реальном времени.\n' +
        '- Atom и Sublime Text: Поддерживают плагины для SASS и LESS, которые позволяют' +
        ' компилировать код непосредственно из редактора.\n' +
        '\n' +
        '#### 4. Инструменты для разработки\n' +
        '\n' +
        '- CodeKit: Это приложение для macOS, которое автоматически компилирует файлов' +
        ' SASS и LESS при их изменении.\n' +
        '- Prepros: Многофункциональный инструмент, которые позволяет компилировать SASS ' +
        'и LESS (и другие препроцессоры) с поддержкой Live Reload.\n',
      active: false,
    },
    {
      level: 'Middle',
      title:
        ' Что такое @import в SASS и LESS, и как он помогает в управлении файлами стилей?',
      response:
        'Директива @import в SASS и LESS — это механизм, который позволяет импортировать и объединять файлы стилей, ' +
        'что существенно облегчает управление и организацию кода. Рассмотрим, как она работает в каждом из препроцессоров ' +
        'и как помогает в управлении файлами стилей.\n' +
        '\n' +
        ' 1. @import в SASS\n' +
        '\n' +
        'В SASS директива @import используется для включения одного SASS-файла в другой. ' +
        'Это позволяет разбить код на логические части и упрощает его организацию.' +
        ' SASS автоматически компилирует все импортированные файлы в один CSS-файл.' +
        '2. @import в LESS\n' +
        '\n' +
        'В LESS также используется директива @import для объединения различных файлов.' +
        ' Подобно SASS, это позволяет структурировать код и облегчить его поддержку и расширение.' +
        'Преимущества использования @import\n' +
        '\n' +
        '1. Организация кода: Использование @import позволяет разбить код на логические части, что делает его ' +
        'более понятным и структурированным.\n' +
        '\n' +
        '2. Управление зависимостями: Импортируя файлы с переменными, миксинами и стилями,' +
        ' вы можете легко управлять зависимостями между различными частями кода.\n' +
        '\n' +
        '3. Переиспользование кода: Миксины и переменные могут быть определены в одном файле и использованы в других,' +
        ' что снижает дублирование кода.\n' +
        '\n' +
        '4. Удобство работы: Поддерживать и обновлять стили становится проще благодаря отделению различных компонентов' +
        ' друг от друга.\n' +
        '\n' +
        '5. Компиляция в CSS: При компиляции все имена и стили объединяются в один CSS-файл, что упрощает' +
        ' подключение стилей на веб-странице.\n\n',
      active: false,
    },
  ],
  active: false,
};
