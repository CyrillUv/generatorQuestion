import { IDataQuestion } from '../question/type';

export const dataAngular: IDataQuestion = {
  name: 'Angular',
  questions: [
    {
      question: 'Что такое Angular?',
      response:
        'Angular – это фреймворк для создания клиентских веб-приложений' +
        ', разработанный компанией Google. Он позволяет создавать динамические веб-приложения, обеспечивая ' +
        'высокую производительность и гибкость кода.',
      active: false,
    },
    {
      question: ' Что такое компонент в Angular?',
      response:
        'Компоненты являются основными строительными блоками Angular-приложений и содержат логику и представление.',
      active: false,
    },
    {
      question: ' Что такое сервисы и как их использовать?',
      response:
        'сервисы — это классы, которые предоставляют определённый функционал и могут быть использованы для ' +
        'обмена данными и выполнения логики, которая не привязана к конкретному компоненту. Сервисы помогают' +
        ' реализовать архитектуру, при которой код становится более модульным, переиспользуемым и легче поддерживаемым.' +
        ' Обычно они используются для взаимодействия с API, хранения и обработки данных, а также для реализации различных функций,' +
        ' таких как маршрутизация, аутентификация и т.д.\n' +
        '\n' +
        '### Основные характеристики сервисов:\n' +
        '\n' +
        '1. Инъекция зависимостей: Angular использует механизм инъекции зависимостей для создания экземпляров сервисов, ' +
        'что позволяет автоматически управлять их жизненным циклом и зависимостями.\n' +
        '\n' +
        '2. Переиспользуемость: Сервисы могут быть использованы в разных компонентах, что повышает переиспользуемость кода.\n' +
        '\n' +
        '3. Модульность: Сервисы способствуют разделению бизнес-логики и логики представления (UI), что улучшает структуру кода.\n' +
        '\n' +
        '4. Тестируемость: Благодаря высокой модульности, сервисы легче тестировать отдельно от компонентов.' +
        "Как правило, сервис регистрируется автоматически при использовании декоратора @Injectable с свойством providedIn: 'root'. " +
        'Это делает его доступным' +
        ' в корневом модуле вашего приложения. Вы также можете зарегистрировать сервис в конкретном модуле или компоненте,' +
        ' добавив его в массив providers соответствующего декоратора.',
      active: false,
    },
    {
      question: 'Каковы основные характеристики Angular?',
      response:
        '### 1. Компонентный подход\n' +
        'Angular основан на компонентной архитектуре, что позволяет разбивать интерфейс приложения на управляемые ' +
        'и переиспользуемые компоненты. Каждый компонент инкапсулирует свою логику, шаблон и стили, что упрощает ' +
        'разработку и сопровождение приложения.\n' +
        '\n' +
        '### 2. Двусторонняя привязка данных\n' +
        'Angular поддерживает двустороннюю привязку данных (two-way data binding), что позволяет автоматически ' +
        'синхронизировать данные между моделью и представлением. Это упрощает взаимодействие между компонентами' +
        ' и инкапсулирует обновления данных, что делает разработку более интуитивной.\n' +
        '\n' +
        '### 3. Модули\n' +
        'Angular использует систему модулей, что позволяет организовать код в независимые и логически связанные' +
        ' группы. Каждый модуль может содержать компоненты, директивы, сервисы и другие модули, что способствует ' +
        'модульному подходу и лучшей управляемости кода.\n' +
        '\n' +
        '### 4. Инъекция зависимостей (Dependency Injection)\n' +
        'Angular предоставляет встроенную поддержку инъекции зависимостей, что упрощает управление зависимостями между ' +
        'классами и улучшает тестируемость приложения. Это позволяет легче управлять жизненным циклом объектов и их взаимодействием.\n' +
        '\n' +
        '### 5. Маршрутизация\n' +
        'Angular включает встроенный модуль маршрутизации, который позволяет организовать навигацию между' +
        ' различными представлениями или страницами приложения. Это делает приложения более удобными для' +
        ' пользователей и улучшает организацию кода.\n' +
        '\n' +
        '### 6. Реактивные формы\n' +
        'Angular позволяет работать с формами через реактивные формы или шаблонные формы, что обеспечивает' +
        ' мощные инструменты для валидации и отслеживания состояния. Реактивные формы позволяют динамически ' +
        'управлять формами в приложении, облегчая их настройку и валидацию.\n' +
        '\n' +
        '### 7. RxJS и реактивное программирование\n' +
        'Angular активно использует библиотеку RxJS, которая предоставляет инструменты для работы с асинхронными' +
        ' данными и потоками событий. Это дает разработчикам возможность эффективно управлять потоками данных ' +
        'и событий с использованием Observable.\n' +
        '\n' +
        '### 8. Генерация и сборка с помощью CLI\n' +
        'Angular CLI (Command Line Interface) позволяет быстро создавать и управлять Angular приложениями.' +
        ' Он предлагает команды для создания новых компонентов, сервисов, модулей и т.д., ' +
        'а также автоматизирует процесс сборки, тестирования и развертывания.\n' +
        '\n' +
        '### 9. Тестируемость\n' +
        'Angular разработан с учетом тестируемости. Он поддерживает юнит-тестирование компонентов и сервисов ' +
        'с помощью таких инструментов, как Jasmine и Karma. Это позволяет легко писать и запускать тесты,' +
        ' что способствует повышению качества кода.\n' +
        '\n' +
        '### 10. Поддержка Progressive Web Apps (PWA)\n' +
        'Angular обеспечивает поддержку создания прогрессивных веб-приложений, которые могут' +
        ' работать как нативные приложения на мобильных устройствах. PWA имеют повышенную скорость загрузки,' +
        ' работоспособность в оффлайн-режиме и возможность установки на домашний экран.\n' +
        '\n' +
        '### 11. Поддержка SEO\n' +
        'Angular предоставляет механизмы для улучшения поисковой оптимизации (SEO) приложений, включая серверный' +
        ' рендеринг с использованием Angular Universal. Это помогает приложениям эффективно индексироваться поисковыми системами.\n',
      active: false,
    },
    {
      question: 'Что такое NgModule?',
      response:
        'NgModule — это основной строительный блок приложения в Angular, который используется для организации и ' +
        'структурирования кода. Он позволяет группировать связанные компоненты, директивы, пайпы и сервисы в единое' +
        ' целое. Основная цель NgModule — определить область видимости и зависимости для различных частей вашего приложения. ' +
        'Вот основные аспекты NgModule:\n' +
        '\n' +
        '### Основные характеристики NgModule:\n' +
        '\n' +
        '1. Определение модуля:\n' +
        'Каждый Angular-модуль определяется с помощью декоратора @NgModule, который принимает объект конфигурации.' +
        ' Этот объект содержит метаданные, описывающие модуль.\n' +
        '\n' +
        '2. Импортируемые и экспортируемые модули:\n' +
        '- Imports: Позволяет модулю импортировать другие модули, что делает доступными их компоненты,' +
        ' директивы и пайпы. Это позволяет разделять функциональность на разные модули и повторно использовать код.\n' +
        '- Exports: Позволяет экспортировать компоненты, директивы и пайпы, чтобы они были доступны в других модулях,' +
        ' которые импортируют текущий модуль.\n' +
        '\n' +
        '3. Область видимости:\n' +
        'Модули определяют область видимости для компонентов и сервисов. Компоненты, указанные в разделе' +
        ' declarations, могут быть использованы только внутри этого модуля, если не экспортированы.\n' +
        '\n' +
        '4. Декларации:\n' +
        'В разделе declarations указываются компоненты, директивы и пайпы, которые принадлежат этому модулю.\n' +
        '\n' +
        '5. Сервис и DI:\n' +
        'Модули могут предоставлять сервисы через секцию providers. Angular автоматически создает экземпляр сервиса' +
        ' и обеспечивает его инъекцию в компоненты, пользовательские директивы и другие сервисы.\n' +
        '\n' +
        '6. Основной модуль:\n' +
        'Каждое Angular-приложение имеет как минимум один корневой модуль, обычно называемый AppModule,' +
        ' который инициализирует приложение.' +
        'NgModule играет жизненно важную роль в организации Angular-приложений. Он обеспечивает модульность, упрощая управление ' +
        'зависимостями, структурирование кода и повторное использование компонентов. Правильное использование NgModule ' +
        'помогает создавать масштабируемые и поддерживаемые приложения.',
      active: false,
    },
    {
      question: 'Data binding (привязка к данным)',
      response:
        'В шаблоне Angular привязка создает живую связь между частью пользовательского интерфейса, ' +
        'созданной из шаблона (элемент DOM, директива или компонент), и моделью (экземпляр компонента, ' +
        'к которому принадлежит шаблон). Эту связь можно использовать для синхронизации представления с ' +
        'моделью, для уведомления модели о том, что в представлении происходит событие или действие пользователя,' +
        ' или для того и другого. Алгоритм обнаружения изменений Angular отвечает за поддержание синхронизации представления и модели.\n' +
        '\n' +
        'Примеры связывания включают в себя:\n' +
        '\n' +
        'интерполяции текста {{value}},\n' +
        'свойство связывание [value]\n' +
        'привязка событий (click)\n' +
        'двусторонняя привязка [{ngModel}]\n' +
        'Привязки всегда состоят из двух частей: цели , которая будет получать связанное значение, и шаблонного ' +
        'выражения , которое создает значение из модели.',
      active: false,
    },
    {
      question: 'Что такое @Pipe',
      response:
        ' функция которая преобразует разметку через | если есть доп свойства то через :\n' +
        '  есть pure и impure pipe - у него есть метод трансформ' +
        'Pipe (или "трубка") в Angular — это специальный механизм, который позволяет преобразовывать данные' +
        ' в шаблонах приложения. Pipes используются для обработки и изменения данных перед их отображением' +
        ' пользователю. Они могут применяться для форматирования текста, преобразования дат, чисел, массивов и многого другого.' +
        'Основные характеристики Pipe:\n' +
        '\n' +
        '1. Простота использования:\n' +
        '- Pipes можно легко использовать в шаблонах Angular. Для этого достаточно указать название pipe и передать ' +
        'ему необходимые параметры в интерполяции или директиве.\n' +
        '\n' +
        '2. Чистые и не чистые Pipes:\n' +
        '- Пайпы могут быть чистыми и не чистыми. Чистые Pipes возвращают один и тот же результат при одинаковых ' +
        'входных данных, а не чистые могут выдавать разные результаты с одинаковыми входными данными (например,' +
        ' если они зависят от динамических данных, таких как текущее время).\n' +
        '\n' +
        '3. Встроенные Pipes:\n' +
        '- Angular предоставляет несколько встроенных pipes, например:\n' +
        '- DatePipe: преобразует дату в заданный формат.\n' +
        '- CurrencyPipe: форматирует число в валюту.\n' +
        '- DecimalPipe: форматирует число в десятичный формат.\n' +
        '- JsonPipe: преобразует объект в JSON-строку для отладки.\n' +
        '\n' +
        '4. Пользовательские Pipes:\n' +
        '- Вы можете создавать свои собственные pipes, чтобы реализовать специфическую логику преобразования ' +
        'данных. Для этого необходимо использовать декоратор @Pipe и реализовать метод transform(value: any, ...args: any[]): any.\n',
      active: false,
    },
    {
      question: 'Хуки жизненного цикла',
      response:
        ' 1.OnChanges - вызывается каждый раз, при установлении свойства\n' +
        '  2.OnInit - один раз при инициализации компонента\n' +
        '  3.DoCheck - при каждом проверки  изменении свойств\n' +
        '  4.AfterContentInit - после проецирования контента в компоненте, вставка в html\n' +
        '  5.AfterContentChecket - после проверки изменения проецируемого контент в шаблон\n' +
        '  6.AfterViewInit - после инициализации представления родительского или дочернего компонента\n' +
        '  7.AfterViewChecket - после проверки представления родительского или дочернего  компонента\n' +
        '  8.OnDestroy - один раз после уничтожения компонента',
      active: false,
    },
    {
      question: 'Модуль и его свойства',
      response:
        '6.Модуль - класс с декоратором @ngModule - обьединяющая структура  для компонент, сервисов, пайпов, директив\n' +
        '        свойства -\n' +
        '        1.Импорт - массив модулей нужных для нашего\n' +
        '        2.Экспорт - массив компонент, пайпов, директив для экспорта\n' +
        '        3.declaration - массив компонент, пайп, директив\n' +
        '        4.providers - сервисы',
      active: false,
    },
    {
      question: 'Lazy loading',
      response:
        'Асинхронная маршрутизация, позволяет не сразу создавать модуль, а когда пользователь переходит по определённому роутингу ',
      active: false,
    },
    {
      question: 'Что такое интерсепторы (interceptors) в Angular?',
      response:
        ' Интерсепторы (interceptors) в Angular являются частью модуля HttpClient и предоставляют' +
        ' мощный механизм для перехвата и обработки HTTP-запросов и ответов. Они позволяют разработчикам' +
        ' добавлять функциональность для каждого запроса и ответа на глобальном уровне, не изменяя сами компоненты' +
        ' или сервисы. Это может быть полезно для обработки заголовков, управления ошибками, добавления токенов аутентификации,' +
        ' логирования, кеширования и других задач.' +
        '\n' +
        'Интерсепторы являются классами, которые реализуют интерфейс HttpInterceptor. Для их создания необходимо выполнить следующие шаги:\n' +
        '\n' +
        '1. Создание класса интерсептора. Он должен реализовать метод intercept, который принимает два параметра: объект HttpRequest' +
        ' и объект HttpHandler. Этот метод должен возвращать объект Observable, который представляет ответ от сервера.\n' +
        '\n' +
        '2. Регистрация интерсептора. Интерсептор необходимо зарегистрировать в корневом модуле приложения или в соответствующем' +
        ' модуле, добавив его в массив providers.' +
        'Применение интерсепторов:\n' +
        '\n' +
        'Интерсепторы могут использоваться для различных задач:\n' +
        '\n' +
        '1. Добавление токенов авторизации. Например, вы можете добавлять JWT-токены в заголовки каждого' +
        ' защищенного запроса.\n' +
        '2. Обработка ошибок. Интерсептор может обрабатывать ошибки от сервера и предоставлять единый подход к' +
        ' этому, вместо необходимости делать это в каждом сервисе или компоненте.\n' +
        '3. Логирование. Вы можете записывать все исходящие запросы и входящие ответы для отладки или аудита.\n' +
        '4. Модификация запросов и ответов. Интерсепторы могут изменять или фильтровать данные запроса и ответа ' +
        'перед их отправкой или после получения.',
      active: false,
    },
    {
      question: 'Взаимодействие с формами',
      response:
        'В Angular взаимодействие с формами осуществляется с помощью двух основных подходов: реактивные формы и шаблонные формы.' +
        ' Оба подхода позволяют обрабатывать пользовательский ввод и валидировать данные, но используют разные механизмы и подходы.' +
        '1. Шаблонные формы (Template-driven Forms)\n' +
        '\n' +
        'Шаблонные формы ориентированы на использование декларативного подхода и позволяют управлять формами через HTML-шаблоны.' +
        ' Для работы с ними нужно импортировать модуль FormsModule.\n' +
        '2. Реактивные формы (Reactive Forms)\n' +
        '\n' +
        'Реактивные формы ориентированы на использование императивного подхода, предоставляя большую гибкость и контроль над формами.' +
        ' Для работы с реактивными формами нужно импортировать модуль ReactiveFormsModule.' +
        'Оба подхода поддерживают валидацию форм. В шаблонных формах валидация осуществляется через атрибуты (например, required), ' +
        'а в реактивных формах — через встроенные валидаторы или пользовательские валидаторы.' +
        ' Шаблонные формы проще и быстрее в реализации, в то время как реактивные формы предоставляют' +
        ' больше контроля и гибкости, особенно для сложных сценариев.',
      active: false,
    },
  ],
  active: false,
};
