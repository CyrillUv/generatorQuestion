{
  "categories": [
    {
      "id": "0",
      "name": "Структуры данных",
      "endpoint": "data-struct"
    },
    {
      "id": "1",
      "name": "JavaScript",
      "endpoint": "/javascript"
    },
    {
      "id": "2",
      "name": "Обьектно-ориентированное программирование",
      "endpoint": "/oop"
    },
    {
      "id": "3",
      "name": "Тестирование",
      "endpoint": "/testing"
    },
    {
      "id": "4",
      "name": "Angular",
      "endpoint": "/angular"
    },
    {
      "id": "5",
      "name": "TypeScript",
      "endpoint": "/typescript"
    },
    {
      "id": "6",
      "name": "Паттерны проектирования",
      "endpoint": "/patterns"
    },
    {
      "id": "7",
      "name": "Сетевые протоколы",
      "endpoint": "/net-protocols"
    },
    {
      "id": "8",
      "name": "Алгоритмы",
      "endpoint": "/algorithms"
    },
    {
      "id": "9",
      "name": "Linux",
      "endpoint": "/linux"
    },
    {
      "id": "10",
      "name": "rxjs",
      "endpoint": "/rxjs"
    },
    {
      "id": "11",
      "name": "Git",
      "endpoint": "/git"
    },
    {
      "id": "12",
      "name": "CSS",
      "endpoint": "/css"
    }
  ],
  "javascript": [
    {
      "id": "bd1a",
      "title": "111",
      "response": "111",
      "level": "Junior",
      "active": false
    },
    {
      "id": "86a3",
      "title": "222",
      "response": "222",
      "level": "Junior",
      "active": false
    }
  ],
  "css": [],
  "git": [
    {
      "id": "968a",
      "title": "Основные понятия Git",
      "response": "1. Репозиторий (repository): Это основное хранилище для вашего проекта, где хранится вся история изменений.2. Коммит (commit): Это сохранение изменений в репозитории. Каждый коммит содержит сообщение о том, что было изменено.3. Ветка (branch): Это параллельная линия разработки, позволяющая работать над новыми функциями или исправлениями без влияния на основную ветку.4. Слияние (merge): Это процесс объединения изменений из одной ветки в другую.5. Конфликты (conflicts): Возникают, когда изменения в двух ветках конфликтуют, и Git не может автоматически объединить их.",
      "level": "Junior",
      "active": false
    },
    {
      "id": "13aa",
      "title": "Основные команды Git",
      "response": "1. git init: Инициализация нового репозитория.2. git clone [url]: Клонирование существующего репозитория.3. git add [file]: Добавление файлов к индексации (подготовка к коммиту).4. git commit -m \"message\": Сохранение изменений с сообщением.5. git status: Проверка статуса файлов в репозитории.6. git log: Просмотр истории коммитов.7. git branch: Просмотр существующих веток.8. git checkout [branch]: Переключение на другую ветку.9. git merge [branch]: Слияние указанной ветки с текущей.10. git pull: Получение последних изменений из удалённого репозитория и автоматическое слияние.11. git push: Отправка коммитов на удалённый репозиторий.",
      "level": "Junior",
      "active": false
    },
    {
      "id": "ab6a",
      "title": "Git hooks",
      "response": "Git hooks — это специальные скрипты, которые выполняются автоматически при выполнении определённых действий с репозиторием Git. Они позволяют настраивать процессы автоматизации и улучшать рабочий процесс разработки. Git поддерживает хуки для различных событий, таких как коммиты, слияния, и отправка данных в удалённый репозиторий. Эти хуки написаны в языке сценариев,таком как Bash, и могут быть настроены в зависимости от ваших нужд.Основные виды хуков 1. pre-commit: Выполняется перед созданием коммита. Используется для проверки кода на ошибки,форматирования, запуска тестов и т.д. Если скрипт завершится с ненулевым кодом, коммит не будет выполнен.2. prepare-commit-msg: Запускается перед открытием редактора для ввода сообщения коммита.Используется для изменения или дополнения стандартного сообщения о коммите.3. commit-msg: Выполняется после того, как сообщение коммита было введено, но перед его сохранением. Полезно для проверки формата сообщения коммита.4. post-commit: Выполняется после завершения коммита. Может использоваться для уведомлений,запуска сборки или других задач, которые должны выполняться после коммита.5. pre-push: Выполняется перед отправкой данных в удалённый репозиторий. Этот хук может использоваться для проверки, что все тесты проходят, прежде чем выполнить git push.6. post-merge: Выполняется после успешного слияния веток. Может использоваться для выполнения дополнительных действий, таких как установка зависимостей или очистка.7. pre-receive, update, post-receive: Эти хуки выполняются на стороне сервера при получении изменений от клиента. Используются для проверки входящих изменений, обеспечения соблюдения политик разработки и т.д.\nКак настроить хуки 1. Путь к хукам: Хуки располагаются в директории вашего Git-репозитория по пути .git/hooks/.По умолчанию в этой директории находятся примеры хуков с расширением .sample, которые можно использовать как шаблоны.2. Создание хука: Чтобы создать хук, просто переименуйте файл, удалив расширение .sample и добавьте ваш код. Например, для создания хуку pre-commit создайте файл с именем pre-commit в директории .git/hooks/.3.После создания хуков не забудьте сделать файл исполняемым, выполнив команду +x .git/hooks/pre-commit Примеры применения хуков - Автоматическое форматирование кода с использованием линтеров. - Запуск тестов перед коммитом или отправкой изменений. - Обработка и проверка сообщений коммита на соответствие стандартам.- Уведомление разработчиков через электронную почту о завершении коммитов или слияний.",
      "level": "Middle",
      "active": false
    },
    {
      "id": "cdc8",
      "title": " Рабочие пространства (Worktrees)",
      "response": "Рабочие пространства (Worktrees) в Git \nпозволяют вам создавать несколько рабочих каталогов для одного\n     репозитория, что позволяет одновременно работать над несколькими ветками         без необходимости переключения между ними. Это особенно полезно для разработчиков, \n        которые хотят разрабатывать или тестировать разные изменения в отдельных ветках одновременно.\n        Основные преимущества Worktrees\n        1. Одновременная работа с несколькими ветками: Вы можете иметь активные копии различных веток в разных каталогах, что позволяет вам работать над несколькими задачами одновременно.2. Изолированное окружение: Каждое рабочее пространство является количеством независимым,что помогает избежать конфликтов и путаницы между изменениями и состояниями веток.\n       3. Упрощение тестирования и деплоя: Рабочие пространства позволяют легко протестировать изменения в одной ветке, не затрагивая другие ветки и не переключаясь между ними.\n        Основные команды для работы с Worktrees 1. Создание нового рабочего пространства:Чтобы создать новое рабочее пространство на основе существующей ветки, используйте команду:git worktree add (путь_к_новому_рабочему_каталогу) (ветка) Эта команда создаст новое рабочее пространство в каталоге ../new-feature-branch на основе ветки feature-branch.2. Просмотр существующих рабочих пространств:Для просмотра всех рабочих пространств в вашем репозитории выполните команду:git worktree list 3. Удаление рабочего пространства:Если вам больше не нужно рабочее пространство, вы можете удалить его с помощью команды:git worktree remove (путь_к_рабочему_каталогу) Обратите внимание, что для успешного удаления рабочего пространства необходимо, чтобы оно было пустым (т.е. в нём не должно быть несохранённых изменений).4. Переключение между рабочими пространствами:После создания рабочего пространства вы можете просто перейти в его каталог и работать, как если бы вы находились в обычном репозитории.Примеры применения Worktrees - Работа над несколькими функциональностями: Если у вас есть несколько функциональностей, которые вы хотите разработать одновременно, вы можете создать отдельные рабочие пространства для каждой из них.- Проверка состояния ветки: Вы можете тестировать изменения в одной ветке, не боясь привести в замешательство незафиксированные изменения в текущей ветке.- Облегчение командной работы: Когда несколько разработчиков работают над проектом, каждый из них может создать своё рабочее пространство для своей задачи, что облегчает совместную работу.",
      "level": "Middle",
      "active": false
    },
    {
      "id": "e3ac",
      "title": "Отмена изменений",
      "response": "Git предоставляет несколько способов отмены изменений:git checkout, git revert и git reset. Это позволяет разработчикам гибко обрабатывать различные ошибки или откатывать изменения.",
      "level": "Junior",
      "active": false
    },
    {
      "id": "2812",
      "title": "Работа сc удалёнными репозиториями",
      "response": "Git поддерживает работу с несколькими удалёнными репозиториями, что позволяет легко клонировать, передавать и получать  данные из них. Команды git push и git pull делают это быстро и эффективно.",
      "level": "Senior",
      "active": true
    },
    {
      "id": "ee63",
      "title": "123213123",
      "response": "123",
      "level": "Junior",
      "active": false
    }
  ]
}